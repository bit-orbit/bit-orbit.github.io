<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Linux on bit-orbit</title>
        <link>https://bit-orbit.github.io/categories/linux/</link>
        <description>Recent content in Linux on bit-orbit</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>fa</language>
        <lastBuildDate>Thu, 01 Aug 2024 03:03:46 +0330</lastBuildDate><atom:link href="https://bit-orbit.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>etc/resolve.conf/</title>
        <link>https://bit-orbit.github.io/p/etc/resolve.conf/</link>
        <pubDate>Thu, 01 Aug 2024 03:03:46 +0330</pubDate>
        
        <guid>https://bit-orbit.github.io/p/etc/resolve.conf/</guid>
        <description>&lt;img src="https://bit-orbit.github.io/images/post/OIG4.jpeg" alt="Featured image of post etc/resolve.conf/" /&gt;&lt;span style=&#39;font-size: 25px&#39;&gt;
&lt;h3 id=&#34;مقدمه&#34;&gt;مقدمه&lt;/h3&gt;
&lt;p&gt;همیشه موقع ویرایش فایل
&lt;em&gt;resolve.conf&lt;/em&gt;
برام سوال بود که گزین های دیگه‌ای که توی این فایل تنظیم شده‌اند چکاری انجام می‌دهند.
درواقع من همیشه دستور
&lt;code&gt;namveserver&lt;/code&gt;
را برای تغییر سرور
&lt;em&gt;dns&lt;/em&gt;
ویرایش می‌کردم. اما دستور هایی دیگه‌ای هم برای این فایل وجود دارد که لیست آنها در
&lt;code&gt;man resolve.conf&lt;/code&gt;
توضیح داده شده است.&lt;/p&gt;
&lt;p&gt;توی این پست من بعضی از دستورات این فایل را توضیح می‌دم.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;در مرحله اول یادتون باشه لینوکس هایی که
systemd
دارند، معمولا از سرویس
systemd-resolved
هم استفاده می‌کنند، این یک سرویس
DNS
لوکال است. در واقع دامنمه‌ها را
resolve
می‌کند و سپس آنها را کش می‌کند که یک دامنه را چندین بار
resolve
نکند.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;یک دامنه حد اقل از &lt;em&gt;دو&lt;/em&gt; بخش تشکیل می‌شود.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;TLD&lt;/li&gt;
&lt;li&gt;Domain&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;bin.example.com        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│     │     │         
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│     │     └─► TDL(Top Level Domain) 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│     │               
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│     └───────► Domain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│                                        
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└─────────────► SubDomain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                                                 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;دستورات&#34;&gt;دستورات&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 &lt;code&gt;nameserver&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;این دستور برای تعیین
IP
یک سرور
DNS
استفاده می‌شود.(در واقع اینجا منظورم یک سرویسی است که به نامه دامنه ها پاسخ دهد که به آن NS می‌گویم.)&lt;/p&gt;
&lt;p&gt;شما می‌توانید تا حداقل سه
IP
لیست کنید، و
resolver
سیستم شما به ترتیب به آنها کوئری خواهد زد.
البته زمانی که اولین
NS
جواب گو نباشد، از دیگر
NS
های لیست شده استفاده خواهد شد.&lt;/p&gt;
&lt;p&gt;اگر به همین ترتیب هر یک از
NS
ها جوابگو نباشد، کوئری ها از اول شروع می‌شود تا به حداکثر تعداد کوئری تعیین شده برسد.&lt;/p&gt;
&lt;p&gt;برای مثال من می‌توانم چند
NS
مختلف را برای خودم تعیین کنم.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 1.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2 &lt;code&gt;options&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;برای این دستور متغیر های مختلفی را می‌توان تعیین کرد.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;2.1 &lt;code&gt;ndots&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;حداقل هر دامنه‌ای در سطح اینترنت یک نقطه دارد، برای مثال
google.com
یک نقطه دارد.
شما می‌توانید با این متغیر تعین کنید که دامنه‌های در سطح اینترنت
باید چند نقطه داشته باشند، هر نقطه نشانه ساب دامنه‌ است.
برای مثال به صورت پیشفرض این متغیر &lt;em&gt;1&lt;/em&gt; تنظیم شده است.
به این معنی است که هر دامنه‌ای یک نقطه داشت، این دامنه
در سطح اینترنت است. ولی اگر شما مقدار این متغیر را
2 تنظیم کنید، دامنه‌ای مثل
&lt;code&gt;google.com&lt;/code&gt;
بعنوان دامنه لوکال تشخیص داده خواهد شد و
&lt;code&gt;hostname&lt;/code&gt;
شما به اول دامنه اضافه خواهد شد.
مثلا اگر
&lt;code&gt;hostname&lt;/code&gt;
شما
&lt;code&gt;arya&lt;/code&gt;
باشد، دامنه به این شکل کوئری زده خواهد شد
&lt;code&gt;google.com.arya&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;در صورتی که شما برای جست و جوی یک دامنه از هیچ
&lt;strong&gt;TLD&lt;/strong&gt;
استفاده نکید، از
&lt;code&gt;hostname&lt;/code&gt;
و یا از مقداری که برای
&lt;code&gt;search&lt;/code&gt;
مشخص کرده‌اید استفاده خواهد شد.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.2 &lt;code&gt;timeout&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;این متغیر تعیین می‌کند که
resolver
چه مقدار زمانی باید منتظر جواب از سمت
NS
باشد، و اگر آن
NS
جواب نداد، از
NS
های بعدی سوال کند.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.3 &lt;code&gt;attempts&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;این متغیر تعین می‌کند که
resolver
در صورت جواب ندادن توسط
NS
باید در نهایت چند کوئری دیگر ارسال کند.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;برای مثال اگر اولین
NS
پاسخ نداد، سوال از
NS
دوم و به همین ترتیب از سوم پرسیده خواهد شد،
تابه حداکثر مقدار
attempts
برسیم.(پس
attempts
مجوع سوال ها از همه
NS
ها است.)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.4 &lt;code&gt;rotate&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;به صورت پیشفرض کوئری های
DNS
همه برای اولین
NS
لیست شده ارسال می‌شود و خب این باعث می‌شود که بار زیادی روی اولین
NS
باشد، برای اینکه این بار را بین همه
‌NS
ها تقسیم کنیم، کافیست از این متغیر استفاده کنیم.
اینکار باعث می‌شود که هر کوئری ها به صورت چرخشی به ترتیب به
NS
های لیست شده ارسال شود.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;3 &lt;code&gt;search&lt;/code&gt;
همانطور که در مثال بالا گفتم، ما نام دامنه ها را تنظیم می‌کنیم که حداقل وقتی یک نقطه دارند،
resolver
آنها را دامنه‌ در سطح اینترنت در نظر بگیرد و به
NS
کوئری بزند. ولی اگر هیچ نقطه‌ای نداشت و یا شما
&lt;code&gt;ndots&lt;/code&gt;
را بیشتر یا مساوی با 2 نتظیم کرده باشید،
&lt;code&gt;hostname&lt;/code&gt;
سیستم شما به آخر آن دامنه اضافه خواهد شد و یک دامنه داخلی
(local)
تلقی خواهد شد.
اما اگر می‌خواهید قبل از اضافه شدن
&lt;code&gt;hostname&lt;/code&gt;
به آن چیز دیگری اضافه کنید، کافیست متغیر سرچ را تعریف کنید و یک یا چند مقدار برای آن تعیین کنید.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;سرویس-systemd-resolve&#34;&gt;سرویس systemd-resolve&lt;/h3&gt;
&lt;p&gt;اگر به فایل
/etc/resolve.conf
نگاه کنید، می‌بینید که یک
ns
برای شما تنظیم شده است که
IP
آن داخلی است.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# cat /etc/resolve.conf
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 127.0.0.53
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;همانطور که توی نکته‌ای در مقدمه این پست گفتم،
سیستم عاملی هایی که از
systemd
استفاده می‌کنند معمولا سرویس
systemd-resolve
را دارند که یک
DNS
داخلی است. این سرویس روی
IP
127.0.0.53
و
127.0.0.54
شنود می‌کند.&lt;/p&gt;
&lt;p&gt;این سرویس خودش یک کانفیگ در
&lt;code&gt;etc/ststemd/resolved.conf/&lt;/code&gt;
دارد.&lt;/p&gt;
&lt;p&gt;اگر داخل این فایل را نگاه کنیم، می‌بنیم که در قسمت
‌DNS
می‌توان
NS
های بالاتر را وارد کرد، اینکار باعث می‌شود که سیستم شما وقتی یک دامنه را
در حافظه کش خود نداشت، از
NS
های بالاتر که در این فایل تنظیم شده است سوال کند.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;[Resolve]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;DNS=1.1.1.1 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ابته تاکید کنم در صورتی از این
NS
ها استفاده می‌شود که شما
‌از 127.0.0.53 و 127.0.0.54 در کانفیگ
/etc/resolve.conf
استفاده کرده باشید.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;تفاوت 127.0.0.54 این است که هر کوئری را مستقیم به
NS
بالاتر ارسال خواهد کرد و از دیتای کش شده استفاده نمی‌کند.
ولی 127.0.0.53 از قابلیت کش استفاده می‌کند.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&#34;مثال&#34;&gt;مثال&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 1.1.1.1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 8.8.8.8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nameserver 9.9.9.9
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;options ndots:1
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;options timeout:2
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;options attempts:3
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;options rotate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;search server1 server2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h3 id=&#34;سخنی-با-شما&#34;&gt;سخنی با شما&lt;/h3&gt;
&lt;p&gt;این را بگم که
DNS
به صورت
recursive(بازگشتی)
عمل می‌کنه، این یعنی وقتی شما یک کوئری ارسال می‌کنید،
این کوئری هر بار به یک سرور بالاتر ارسال می‌شود
تا در نهایت به جواب برسه. و خب این موضوع خودش در نهایت یک جریان
خیلی جالب داره که امیدوارم یک روز اون رو هم بنویسم :)&lt;/p&gt;
&lt;/span&gt;</description>
        </item>
        <item>
        <title>Linux File Locking چیست؟</title>
        <link>https://bit-orbit.github.io/p/linux-file-locking-%DA%86%DB%8C%D8%B3%D8%AA/</link>
        <pubDate>Fri, 09 Feb 2024 01:49:42 +0330</pubDate>
        
        <guid>https://bit-orbit.github.io/p/linux-file-locking-%DA%86%DB%8C%D8%B3%D8%AA/</guid>
        <description>&lt;img src="https://bit-orbit.github.io/images/post/flilock.jpeg" alt="Featured image of post Linux File Locking چیست؟" /&gt;&lt;p&gt;بیایید قبل از اینکه راه حل را ببینیم، اول مشکل را دقیق تر برسی کنیم.
به این فکر کنید که شما یک فایلی دارید که شامل یک عدد است که اشاره می‌کند به مقدار
اعتباری که کاربر در حسابش دارد. حالا اگر قرار باشد یک پورسه اون مقدار را بر اساس ارائه
سرویسی، از حساب کاربر کم کند، و پروسه دیگری به دلیل افزایش اعتبار، مقداری را به حساب
کاربر اضافه کند، چه مشکلاتی اتفاق می‌افتد؟&lt;/p&gt;
&lt;p&gt;برای اینکه دقیق تر بشیم، این روند رو باهم پیش می‌بریم.
فرض کنید فایلی به اسم
amount.txt
مقدار 100 داخلش نوشته شده است. و دو پروسه کم و اضافه کردن را اجرا می‌کنیم.
توی این مثال،‌ ما می‌خواهیم مقدار 20 از حساب کاربر کم و مقدار 50 به حساب کاربر
اضافه کنیم، پس ما انتظار داریم در انتها فایل ما مقدار 130 را درونش ذخیره کرده باشد.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;پروسه اول فایل را می‌خواند و مقدار 100 را در حاظه‌اش نگه می‌دارد&lt;/li&gt;
&lt;li&gt;پروسه دوم فایل را می‌خواند و مقدار 100 را در حاظه‌اش نگه می‌دارد&lt;/li&gt;
&lt;li&gt;پروسه اول مقدار 20 را از 100 کم می‌کند و مقدار 80 را در حافظه ذخیره می‌کند&lt;/li&gt;
&lt;li&gt;پروسه دوم مقدار 50 را به 100 اضافه می‌کند و مقدار 150 را در حافظه ذخیره می‌کند&lt;/li&gt;
&lt;li&gt;پروسه اول مقدار 80 را در فایل ذخیره می‌کند&lt;/li&gt;
&lt;li&gt;پروسه دوم مقدار 150 را در فایل ذخیره می‌کند&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;همینطور که همه ما انتظار داشتیم، ما باید در این فایل مقدار 130 را ذخیره می‌کردیم،
اما پروسه های ما به دلیل اینکه هیچ همکاری و یا هیچ مکانیزمی دیگری ندارند که این مقدار ها را
به یکدیگر اطلاع دهند، مشکل
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Race_condition#Software&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Race condition&lt;/a&gt;
رخ می‌دهد.&lt;/p&gt;
&lt;p&gt;یکی از راه حل های این مشکل
lock
کردن فایل توسط هر پروسه است، که به این کار
file locking
گفته می‌شود.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;file locking&lt;/strong&gt;
یک مکانیزم برای کنترل دسترسی چندین پروسه به یک فایل است.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;توی لینوکس یکی از دستورات خطرناکی که داریم دستور
sudo rm -rf /
است. وقتی این دستور را اجرا کنیم کل فایل های لینوکس ما حذف می‌شود.
دلیل اینکار این است که لینوکس به صورت پیشفرض فایل های باز شده را
lock
نمی‌کند.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;با اینحال لینوکس دو مکانیزم مختلف
&lt;em&gt;advisory&lt;/em&gt; و &lt;em&gt;mandatory&lt;/em&gt;
را پشتیبانی می‌کند.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;توی این پست بیشتر تمرکز من روی مکانیزم
advisory locking(مشورتی)
است.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;این روش به این شکل عمل می‌کند که هیچ پروسه‌ای مجبور به اجرای این روش نیست و اگر حتی
فایل توسط یک پروسه‌ای
lock
شده باشد، باز هم پروسه های دیگر می‌توانند به
lock
بودن فایل اهمیت ندهند و مقدار آن را تغییر دهند. این اتفاق به این دلیل می‌افتد که
advisory lock
توسط سیستم عامل و یا فایل سیستم انجام نمی‌شود.&lt;/p&gt;
&lt;p&gt;خب بیایید با یک مثال این فرایند را برسی کنیم. مثل مثال قبلی فرض کنید ما مقدار 100
را داخل فایل
amount.txt
داریم و می‌خواهیم مقدار 20 از آن کم و مقدار 50 به آن اضافه کنیم.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;پروسه اول قبل از خواندن فایل، فایل را لاک می‌کند&lt;/li&gt;
&lt;li&gt;پروسه دوم برای لاک کردن فایل اقدام می‌کند و از جایی که پروسه اول از پیش فایل را لاک کرده است، برای آزاد شدن لاک صبر می‌کند&lt;/li&gt;
&lt;li&gt;پروسه اول مقدار 20 را از 100 کم می‌کند و مقدار 80 را درون فایل می‌نویسد&lt;/li&gt;
&lt;li&gt;پروسه اول لاک فایل را آزاد می‌کند.&lt;/li&gt;
&lt;li&gt;پروسه دوم فایل را لاک و مقدار جدید 80 را از فایل می‌خواند&lt;/li&gt;
&lt;li&gt;پروسه دوم مقدار 50 را به 80 اضافه و مقدار 120 را درون فایل می‌نویسد&lt;/li&gt;
&lt;li&gt;پروسه دوم لاک فایل را آزاد می‌کند تا پروسه های دیگر بتوانند با فایل کار کنند.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;اگر شما می‌خواهید این مکانیزم را روی یک فایل اجرا کنید، دستور
flock
برای شما اینکار را خواهد کرد.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;flock &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;options&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; file&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;directory &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;arguments&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;این کامند در حالت عادی از شما یک فایل و یک دستور خواهد گرفت و مکانیزم
advisory lock
را روی ان فایل اجرا خواهد کرد.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;flock   /tmp/fli    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; 12&amp;gt;/tmp/fli
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;برای اینکه روند را بهتر درک کنیم یک فایل
bash
می‌نویسیم که بتوانیم مثال اولیه را روی آن اجرا کنیم.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;balance.dat&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;cat &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Read current balance:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#sleep 10 seconds to simulate business calculation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;progress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$progress&lt;/span&gt; -lt &lt;span class=&#34;m&#34;&gt;101&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; -n -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;\033[77DCalculating new balance..&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$progress&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;%&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	sleep &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nv&#34;&gt;progress&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;progress&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$((&lt;/span&gt;value+&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Write new balance (&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;) back to &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&amp;#34;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Done.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;ما این فایل را همزمان با دو ترمینال اجرا می‌کنیم.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/advisory_lock.gif&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;advisory lock&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;همینطور که می‌بینید پروسه دوم برای اینکه محتوای فایل را تغییر دهد، باید صبر کند تا لاک فایل
آزاد شود.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;این پست خلاصه‌ای بود از
&lt;a class=&#34;link&#34; href=&#34;https://www.baeldung.com/linux/file-locking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;این بلاگ&lt;/a&gt;
که هر دو نوع
advisory lock و mandatory lock
را توضیح می‌دهد.&lt;/p&gt;
&lt;p&gt;برای من سوال بود که من چطور می‌توانم مکانیزمی که
flock
استفاده می‌کند را در برنامه های خودم پیاده سازی کنم، و خب نتیجه این بود که معمولا برای
advisory lock
هر زبانی یک کتابخانه استاندار دارد
توی
&lt;a class=&#34;link&#34; href=&#34;https://docs.python.org/3/library/fcntl.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;پایتون کتابخانه&lt;/a&gt;
&lt;code&gt;fcntl&lt;/code&gt;
اینکار را انجام می‌دهد.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>فورک بمب چیست و چطور کار می‌کند؟</title>
        <link>https://bit-orbit.github.io/p/%D9%81%D9%88%D8%B1%DA%A9-%D8%A8%D9%85%D8%A8-%DA%86%DB%8C%D8%B3%D8%AA-%D9%88-%DA%86%D8%B7%D9%88%D8%B1-%DA%A9%D8%A7%D8%B1-%D9%85%DB%8C%DA%A9%D9%86%D8%AF/</link>
        <pubDate>Wed, 27 Dec 2023 16:39:27 +0330</pubDate>
        
        <guid>https://bit-orbit.github.io/p/%D9%81%D9%88%D8%B1%DA%A9-%D8%A8%D9%85%D8%A8-%DA%86%DB%8C%D8%B3%D8%AA-%D9%88-%DA%86%D8%B7%D9%88%D8%B1-%DA%A9%D8%A7%D8%B1-%D9%85%DB%8C%DA%A9%D9%86%D8%AF/</guid>
        <description>&lt;img src="https://bit-orbit.github.io/images/post/fork_bomb.jpg" alt="Featured image of post فورک بمب چیست و چطور کار می‌کند؟" /&gt;&lt;p&gt;اوایل که لینوکس نصب کرده بودم کامند هایی که توی
فروم های مختلف می‌دیدم و برای من جدید بود
را دوست داشتم یاد بگیرم و بدانم
کار آنها چی هست، برای همین هر کامندی را که می‌دیدم در
اولین
فرصت داخل سیستم خودم اجرا می‌کردم. که خب کور کورانه اجرای
هر کامندی اشتباهه بود. یکی از این کامند ها که اجرا کرده
بودم، به اسم فورک بمب
(fork bomb)
شناخته می‌شود. کامند به این صورت هست&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;:&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;اگر این کامند را اجرا کنید(امیدوارم تا الان نکرده باشید) تقریبا زیر یک دقیقه سیستم شما
هنگ می‌کند و مجبور می‌شوید سیستم را ریبوت کنید.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;توی این پست ساختار این کامند را تشریح می‌کنم و باهم
کمی
bash
یاد می‌گیریم.&lt;/p&gt;
&lt;p&gt;بیایید اول با مفهوم
recustion
آشنا بشیم، زمانی که یک قطعه کد خودش اجرا کند،
recusion
می‌گویم. مثلا شما یک فانکشن می‌نویسید به اسم
&lt;em&gt;fn&lt;/em&gt;
و توی بدنه فانکشن فقط خود همین فانکشن را صدا می‌‌کنید،
به این کار
call recursion
گفته می‌شود. فورک بمب دقیقا همین کار را می‌کند. به این
معنی که خودش را دائم اجرا می‌کند!&lt;/p&gt;
&lt;p&gt;به این فکر کنید که وقتی یک پراسس خودش را اجرا می‌کند
،مجدد پراسس های اجرا شده توسط اون هم دائم خودشان را اجرا
می‌کنند،
و دوباره هر پروسه‌ای که اجرا می‌شود بازم خودش را اجرا
می‌کند و این روند تا زمانی که رم و پردازنده سیستم تحمل
داشته باشد ادامه دارد.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;درختی که می‌بینید را اجرای فورک بمب درنظر بگیرید،
هر ستاره یک پروسه جدید است که توسط پروسه قبلی اجرا شده،
و خودش هم دو پروسه جدید باز می‌کند و هر یک از پروسه ها
هم همین روند را ادامه می‌دهند.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;       &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;               &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;├──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;│&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;                   &lt;/span&gt;&lt;span class=&#34;err&#34;&gt;└──&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;من برای اینکه سیستم‌ خودم هنگ نکند فورک بمب را روی داکر
اجرا کردم و خب حتی یک ثانیه هم طول نکشید و آن کانتینر
کاملا هنگ کرد.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;قبل از اجرا
&lt;a class=&#34;link&#34; href=&#34;https://bit-orbit.github.io/images/post/forkbomb_docker0.jpg&#34; &gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/forkbomb_docker0.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;forkbomb on docker&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;زمان اجرا
&lt;a class=&#34;link&#34; href=&#34;https://bit-orbit.github.io/images/post/forkbomb_docker.jpg&#34; &gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/forkbomb_docker.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;forkbomb on docker&#34;
	
	
&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;بیایید وارد کد بشیم، این علامت ها و کاراکتر ها چی هستند؟&lt;/p&gt;
&lt;!-- برای تعریف یک فانکشن توی 
bash
ما به این صورت عمل می‌کنیم که اول اسم فانکشن بعد پرانتز 
و بعد کرلی براکت(توی فارسی می‌گیم آکولاد) و داخل کرلی 
براکت ما قطعه کد را می‌نویسیم. مثلا برای فانکشنی که یک
اسم را روی صفحه چاپ کنه به این صورت عمل می‌کنیم

```bash
pname(){ echo &#39;foo&#39;; }
``` --&gt;
&lt;p&gt;اگه دقت کنید اولین کاراکتر فورک بمب، علامت
&lt;code&gt;:&lt;/code&gt;
است. این علامت اسم فانکشن ما است. برخلاف قانون تعریف نام
برای متغییر ها توی
bash،
می‌توانیم از کاراتر های یونیکد هم برای تعریف نام فانکشن
استفاده کنیم، مثلا یک
کاراکتر چینی یا حتی ایموجی!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;雨&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;rain&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;❤️&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;love&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;خب در ادامه علامت های
&lt;code&gt;()&lt;/code&gt;
را می‌بینیم، توی
bash
برای تعریف فانکشن قبل از اسم فانکشن هیچ کلمه کلیدی مثل
fn, def, void
و &amp;hellip; نیاز نیست، فقط بجای آن باید
&lt;strong&gt;بعد از اسم فانکشن&lt;/strong&gt;
پرانتز ها را بگذارید.&lt;/p&gt;
&lt;p&gt;مثل خیلی از زبان های برنامه نویسی، بدنه فانکشن توی
کرلی براکت تعریف می‌شود.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:&lt;span class=&#34;o&#34;&gt;(){}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;پس تا اینجا ما یک فانکشن ساده با نام
&lt;code&gt;:&lt;/code&gt;
تعریف کردیم.&lt;/p&gt;
&lt;p&gt;داخل بدنه این فانکشن، اسمی که برای فانکشن قرار دادیم
همان
&lt;code&gt;:&lt;/code&gt;
را می‌نویسیم. با اینکار دقیقا
call recursion
را انجام دادیم، و باعث شدیم که برنامه خودش را
توی هر اجرا مجدد اجرا کند.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; : &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;دقت کنید توی سینتکس
bash
حتما باید یک فاصله برای کدی که داخلی کرلی براکت می‌نویسم قرار بدیم&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;علامت
&lt;code&gt;|&lt;/code&gt;
به اسم پایپ شناخته می‌شود، وظیفه این علامت
دادن خروجی یک کامند بعنوان ورودی به یک کامند دیگر هست،
حلا
دقت کنید که ما خروجی اجرای
&lt;code&gt;:&lt;/code&gt;
را به خودش می‌دهیم. دقیقا به این شکل&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;: &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;با این علامت هر پروسه دو بار پروسه جدیدی از خودش می‌سازد
اگر از این علامت استفاده نکنیم، پروسه ما به صورت خطی خودش
را اجرا خواهد کرد، اینطوری کد ما با یک حلقه
&lt;code&gt;while&lt;/code&gt;
تفاوتی زیادی نخواهد داشت.&lt;/p&gt;
&lt;p&gt;علامت
&lt;code&gt;&amp;amp;&lt;/code&gt;
اجرای یک کامند را به بکگراند(پس زمینه) می‌برد.
برای مثال بعد از اجرای یک دستور باید صبر کنید پروسه
آن تمام شود تا بتوانید دستور بعدی را اجرا کنید.
ولی اگر از علامت
&lt;code&gt;&amp;amp;&lt;/code&gt;
بعد از هر دستور استفاده کنید، دیگر نیاز نیست
صبر کنید تا روند اجرای آن برنامه تمام شود.
درواقع با علامت
&lt;code&gt;&amp;amp;&lt;/code&gt;
شما می‌توانید
هر برنامه را در بکگراند اجرا کنید. حالا توی فورک بمب
این علامت باعث می‌شود تا فانشکنی که اجرا کردین درحالی که کارش به اتمام
نرسیده است، فانکشن بعدی اجرا بشود.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/forkbomb_and.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;&amp; in bash&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;و بعد علامت
&lt;code&gt;;&lt;/code&gt;
را می‌بینیم. این علامت کامند ها را از هم جدا می‌کند.
مثلا شما می‌توانید چند کامند مختلف را توی یک خط بنویسید.
توی فورک بمب این علامت فانکشنی که تعریف کردین را از
دستور بعدی(که اجرا کننده اون فانکشن هست)جدا می‌کند.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;آخرین علامتی که توی فورک بمب داریم همون علامت
&lt;code&gt;:&lt;/code&gt;
یا همون اسمی هست که برای فانکشن قرار دادیم.
خیلی ساده توی
bash
برای اجرای یک فانکشن فقط اسم‌ش را می‌نویسیم.&lt;/p&gt;
&lt;p&gt;و تمام! ما یاد گرفتیم چطور فورک بمب رو بنویسیم و دیگه
نیاز نیست حفظ‌ش کنیم :)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;:&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;:&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title> در لینوکس چیست؟ TTY </title>
        <link>https://bit-orbit.github.io/p/%D8%AF%D8%B1-%D9%84%DB%8C%D9%86%D9%88%DA%A9%D8%B3-%DA%86%DB%8C%D8%B3%D8%AA-tty/</link>
        <pubDate>Mon, 31 Jan 2022 19:57:05 +0330</pubDate>
        
        <guid>https://bit-orbit.github.io/p/%D8%AF%D8%B1-%D9%84%DB%8C%D9%86%D9%88%DA%A9%D8%B3-%DA%86%DB%8C%D8%B3%D8%AA-tty/</guid>
        <description>&lt;img src="https://bit-orbit.github.io/images/post/tty.jpg" alt="Featured image of post  در لینوکس چیست؟ TTY " /&gt;&lt;div dir=&#39;rtl&#39; style=&#39;font-size:x-large&#39;&gt;
&lt;p&gt;شما باید درباره اصطلاح
tty
زمانی که به لینوکس و یونیکس آمد، شنیده باشید. اما
tty
چیست؟&lt;/p&gt;
&lt;p&gt;آیا برای شما به عنوان یک کاربر دستکتاپ مفید است؟&lt;/p&gt;
&lt;p&gt;به آن نیاز دارید؟ می‌توانید با آن چه کار کنید؟&lt;/p&gt;
&lt;p&gt;اجازه دهید هر چیز ضروری برای آشنا کردن شما با اصطلاح
tty
را در این پست برسی کنیم.&lt;/p&gt;
&lt;p&gt;به یاد داشته باشید که پاسخ قطعی برای این سوال وجود ندارد،
اما به نحوه تعامل دستگاه های
input/output(ورودی/خروجی)
در گذشته ربط دارد.&lt;/p&gt;
&lt;p&gt;برای اینکه تصویری شفاف از آن داشته باشید باید کمی از تاریخ‌ش را بدانید.&lt;/p&gt;
&lt;h3 id=&#34;تاریخ-پشت-اصطلاح-tty&#34;&gt;تاریخ پشت اصطلاح tty&lt;/h3&gt;
&lt;p&gt;همه چیز از یک
&lt;em&gt;teleprinter&lt;/em&gt;
در سال 1830 شروع شد.&lt;/p&gt;
&lt;p&gt;teleprinter
به شما اجازه می‌داد که از طریق سیم پیام ارسال و دریافت کنید.
teleprinter
جایگزینی برای ارطبات مورس کد بود در آن دو اپراتور برای ارطبات با یکدیگر مود نیاز بود. اما در
teleprinter
فقط به یک اپراتور برای ارسال پیام نیاز داشت.  درحالی که
teleprinter
یک صفحه کلید مدرن نداشت، بعد ها سیستم آن توسط
Donald Murray
به یک صفحه کلید
&lt;em&gt;teletypewriter&lt;/em&gt;
تکامل یافت.&lt;/p&gt;
&lt;p&gt;Murray
زحمت اپراتور ها را برای
ارسال و پیام را کاهش داد و این امکان را برای
teletypeprinter
فراهم کرد که به عنوان یک
teletypewriter
تجاری در سال 1908 بیرون بیاید.
tty
نام کوتاه شده
teletypewrite
است.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/teletypewrite.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;تفاوت بین
teletypewrite
و
typewriter
های معمولی این بود که
teletypewrite
به یک دستگاه ارطباتی برای ارسال پیام نوشته شده متصل بود.
teletypewriter
ارطبات سریع تری را تا اکنون برای انسال بدون استفاده از کامپیوتر مقدور کرده است.
و اینجا جایی است که
tty
بوجود آمد.&lt;/p&gt;
&lt;h3 id=&#34;مفهوم-مدرن&#34;&gt;مفهوم مدرن&lt;/h3&gt;
&lt;p&gt;اکنون شما باید متعجب شده باشید که چطور
tty
به لینوکس و کامپیوتر مدرن آمده است.&lt;/p&gt;
&lt;p&gt;بسیار خب، برای شروع، زمانی که
teletypewriter
به بازار رسید، چند سال بعد ترانزیستور های نیمه هادی(نیمه رسانا) توسعه داده شد که به
میکروپروسسور(micro proccessor)
هایی تبدیل شدند که کامپیوتر را ممکن می‌کرند.&lt;/p&gt;
&lt;p&gt;کامپیوتر های اولیه مفهومی به اسم صفحه کلید نداشتند.
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Punched_card&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;کارت های پانج&lt;/a&gt;
روش ورودی دادن به کامپیوتر ها بود&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/punch-card.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;card-punch&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;درحالی که کامپیوتر ها توسعه پیدا می‌کردند، بالاخره کارت های پانچ با
teletypewriter
به عنوان دستگاه &lt;em&gt;&lt;strong&gt;&lt;u&gt;ورودی/خروجی&lt;/u&gt;&lt;/strong&gt;&lt;/em&gt; مناسب جایگزین شد.    &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/pc-tty.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;LGP-30 computer in 1956 with a TTY attached to it&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;با توسعه تکنولوژی
teletypewriter
ها با استفاده از الکترونیک مجازی شدند. پس شما به یک
tty
فیزیکی، مکانیکی نیاز پیدا نمی‌کنید، بلکه به یک
tty
مجازی، الکترونیکی نیاز دارید.&lt;/p&gt;
&lt;p&gt;اوایل کامپیوتر ها صفحه نمایش هم نداشتند. چیز ها بجای نمایش داده شدن بروی صفحه نمایش
(که وجود نداشت)
به روی کاغذ چاپ می‌شدند. به همین دلیل شما بجای دیدن اصطلاح
&lt;code&gt;display&lt;/code&gt;
اصطلاح
&lt;code&gt;print&lt;/code&gt;
را می‌بینید.
ویدیو ها به عنوان تکنولوژی پیشرفته به ترمینال(پایانه) ها اضافه شد.
به عبارت دیگر شما باید درباره ترمینال های ویدیویی شنیده باشید. یا شما می‌توانید
آن ها را ترمینال های فیزیکی بنامید.&lt;/p&gt;
&lt;p&gt;سپس اینها به ترمینال های نرم افزاری شبیه سازی شده تکامل پیدا کردند که با قابلیت ها و
ویژگی های تسوسعه یافته‌ای همرا بود. این چیزی است که شما آن را
terminal emulator
می‌نامید.&lt;/p&gt;
&lt;p&gt;برای نمونه ترمینال
&lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/GNOME_Terminal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;گنوم
(Gnome)&lt;/a&gt;
یا
&lt;a class=&#34;link&#34; href=&#34;https://konsole.kde.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;کنسول
(Konsole)&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://itsfoss.com/linux-terminal-emulators/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;چنتا از بهترین ترمینال هایی هستند که می‌توانید برای لینوکس پیدا کنید.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;بسیارخب-tty-در-لینوکس-چیست&#34;&gt;بسیارخب tty در لینوکس چیست؟&lt;/h3&gt;
&lt;p&gt;زمانی که
tty
به لینوکس و یونیکس آمد، یک دستگاه مستقل در یونیکس و لینوکس بود گاهی
tty
به یک دستگاه ورودی فیزیکی مانند
serial port(درگاه سریال)
اشاره می‌کرد، و گاهی به ترمینال های مجازی اشاره می‌کرد که به کاربران اجازه تعامل با
سیستم را می‌داد.&lt;/p&gt;
&lt;p&gt;tty
یک زیر سیستم در لینوکس و یونیکس است که مدریت فرایند، ویرایش خط و
مدیریت نشست ها را در سطح کرنل از طریق درایور های
tty
ممکن می‌کند.&lt;/p&gt;
&lt;p&gt;از دیدگاه برنامه نویسی شما باید در این موضوع عمیق تر شوید. اما محدوده این
پست را در نظر بگیرید، این مقاله باید یک توضیح ساده برای درک بهتر باشد.
در حقیقت، هر گاه یک ترمینال را باز می‌کنیم یا هر نوع
shell
دیگیری را در سیستمتان استفاده کنید، آن
shell
با
tty
مجازی که
&lt;em&gt;PTY&lt;/em&gt;
یا
&lt;em&gt;pseudo-tty&lt;/em&gt;
هم شناخته می‌شوند، تعامل خواهد داشت.&lt;/p&gt;
&lt;p&gt;شما می‌توانید
tty
را در ترمینال تایپ کنید و
pty
مرتبط را پیدا کنید.&lt;/p&gt;
&lt;h3 id=&#34;چگونه-به-tty-در-لینوکس-دسترسی-داشته-باشیم&#34;&gt;چگونه به tty در لینوکس دسترسی داشته باشیم؟&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/ubuntu-tty.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tty-in-ubuntu&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;دسترسی به
tty
در لینوکس ساده است. در حقیت زمانی که هیچ سرنخی از اینکه
tty
چیست نداشتم، به طور اتفاقی به آن دسترسی پیدا کردم و از اینکه چطوری باید
از آن خارج شوم وحشت زده شدم!&lt;/p&gt;
&lt;p&gt;شما می‌توانید با کلید های میانبر زیر در اکثر توزیع های لینوکس به صفحه
tty
دسترسی پیدا کنید.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F1&lt;/code&gt; – &lt;strong&gt;Lockscreen&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F2&lt;/code&gt; – &lt;strong&gt;Desktop Environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F3&lt;/code&gt; – &lt;strong&gt;TTY3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F4&lt;/code&gt; – &lt;strong&gt;TTY4&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F5&lt;/code&gt; – &lt;strong&gt;TT5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CTRL&lt;/code&gt; + &lt;code&gt;ALT&lt;/code&gt; + &lt;code&gt;F6&lt;/code&gt; – &lt;strong&gt;TTY6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;شما می‌توانید حد اکثر به
&lt;u&gt;6&lt;/u&gt;
tty
دسترسی داشته باشید، با این حال دو تا از اولین کلید های میانبر به صفحه قفل
و محیط دسکتاپ اشاره دارد.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/ubuntu-tty4.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;cmd-with-tty&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;بنابر این، با باقی کلید های میانبر شما به محیط
command-line
دسترسی می‌گیرید.&lt;/p&gt;
&lt;h3 id=&#34;چه-زمانی-شما-از-tty-در-لینوکس-استفاده-خواهید-کرد&#34;&gt;چه زمانی شما از tty در لینوکس استفاده خواهید کرد؟&lt;/h3&gt;
&lt;p&gt;tty
فقط یک گنج تکنیکی نیست. حتی برای کاربرانی مثل من که توسعه دهنده هم نیستند مفید است.&lt;/p&gt;
&lt;p&gt;زمانی که محیط گرافیکی فریز می‌شود باید به کار بیاید. در بعضی از مواقع
نصب مجدد محیط گرافیکی با استفاده از
tty
می‌تواند مشکل را حل کند.&lt;/p&gt;
&lt;p&gt;یا شما می‌توانید
tty
را برای انجام کار هایی مثل آپدیت انتخاب کنید جایی که شما نمی‌خواهید مشکلات بصری فرایند
های شما را مختل کند.&lt;/p&gt;
&lt;p&gt;بد ترین مورد سناریو، شما می‌تواند زمانی که محیط دستکتاپ جواب نمی‌دهد، برای ریبوت
به
tty
مراجعه کنید.&lt;/p&gt;
&lt;p&gt;بعضی از کاربران ترجیح می‌دهند که فایل های بزرگ را با
tty
منتقل کنند(من از آنها نیستم)&lt;/p&gt;
&lt;h3 id=&#34;tty-به-عنوان-یک-دستور-در-لینوکس&#34;&gt;tty به عنوان یک دستور در لینوکس&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://bit-orbit.github.io/images/post/tty-cmd.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;tty-cmd&#34;
	
	
&gt;&lt;/p&gt;
&lt;p&gt;همانطور که در صفحه راهنمای
(man page)
tty
توضیح داده شده است، زمانی که شما
tty
را در ترمینال تایپ کنید، نام فایل ترمینال که به وردی استاندارد متصل است را چاپ می‌کند.&lt;/p&gt;
&lt;p&gt;به عبارت دیگر برای دانستن عدد
tty
که به آن متصل هستید، فقط
tty
را در ترمینال تایپ کنید.
اگر چند کاربر از راه دور به سیستم لینوکس متصل هستند، می‌توانید برای برسی اینکه به
چه متصل هستند از کامند
&lt;code&gt;who&lt;/code&gt;
استفاده کنید.&lt;/p&gt;
&lt;h3 id=&#34;خارج-از-ترجمه&#34;&gt;خارج از ترجمه&lt;/h3&gt;
&lt;p&gt;متن ترجمه شده بود و خب من یک مترجم تخصصی نیستم، من یک برنامه نویسم که بلاگ نویسی
و ترجمه رو هم دوست دارم، سعی کردم به بهترین نحو متن را ترجمه کنم
و در اختیار بقیه بذارم، اگر حس کردین جایی از متن مشکلی داره، خیلی خوشحال می‌شوم
که مشکلم رو بهم بیگید، این کمک بزرگیه.&lt;/p&gt;
&lt;p&gt;متن اصلی رو می‌توانید از
&lt;a class=&#34;link&#34; href=&#34;https://itsfoss.com/what-is-tty-in-linux/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;این لینک&lt;/a&gt;
بخوانید.&lt;/p&gt;
&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
