[{"content":"اول بیایید ببینم FileBin چیه! قبل از اون هم فکر می‌کنم همه بدونیم pastebin چیه. اگه نمی‌دونید خیلی ساده باید بگم یک سایتی که فقط روی اون متن به اشتراک می‌ذارن مثلا ممکنه ارور ها یا حتی سورس یک برنامه باشه!\nاما FileBin ها بجای تسکت فایل های شما رو نگهداری می‌کنند و به شما لینکی ارائه می‌کنند که فایل را برای دیگران اشتراک بگذارید، نمونه های زیادی هم وجود داره مثل https://wormhole.app\nاما خب از اونجایی که من زندگی‌ام رو توی ترمینال می‌گذرونم و ترمینال رو به باز کردن مرورگر برای اشتراک یک فایل ترجیح می‌دم، پس از FileBin هایی استفاده می‌کنم که بتونم تحت ترمینال به سادگی فایلم رو به اشتراک بذارم. برای مثال https://0x0.st\nوقتی این رو سایت رو باز کنید هیچ گزینه‌ای برای انتخاب فایل و آپلود نمی‌بینید! خب پس چطور باید یک فایل را برای سایت آپلود کنید؟ کافیه یک ریکوئست HTTP POST خیلی ساده به سایت بزنید که شامل فایتون باشه. این کار رو خیلی ساده می‌شه با curl انجام داد.\nمثلا بیایین اشتراک یک فایل رو ببینیم\n1 2 $ curl https://0x0.st -F file=@/path/to/file # https://0x0.st/zWKo.txt این سایت خیلی خوبه اما از زمانی به بعد دیگه این سایت کاری که من نیاز دارم رو کفاف نداد! برای مثال من نیاز دارم فایلم بعد از اولین دانلود از روی سرور حذف بشه و از این مهم تر نیاز داشتم که چندین فایل رو با یک یوزنیم مشخص اپلود کنم که خب شخصی که قرار باشه فایل ها رو دانلود کنه، کافیه از یوزنیم استفاده کنه که راحت تر قابل حفظ کردن و اشتراک گذاشتنه. اینطوری بود که گفتم FileBin خودم رو بنویسم :)\nبیایید فیچر ها و روش استفاده ازش رو با هم ببینیم.\nفرض کنید شما یک فایل دارید که می‌خواهید با من به اشتراک بگذارید، خیلی ساده ترمینال رو باز می‌کنید و با یک دستور فایل رو با یک URL تقریبا تصادفی منتشر می‌کنید.\n1 2 $ curl -L octocat.ir -F file=@/tmp/theFile.fli # octocat.ir/theFile.fli دقت کنید من از سوییچ -L استفاده می‌کنم، دلیل اینکار این هست که خب ممکنه سایت شما رو ریدایرکت کنه. مثلا از http ریدایرکت بشین به https. برای همین این سوییچ رو استفاده می‌کنم. با این سوییچ دیگه نیازی نیست https:// رو هم بنویسیم!\nحالا اگه نیاز دارین که فایلتون بعد از اولین دانلود از روی سرور حذف بشه و دیگه در دسترس نباشه کافیه از کلمه once بجای file استفاده کنید.\n1 2 $ curl -L octocat.ir -F once=@/tmp/theFile.fli # octocat.ir/theFile_GKug7xb.fli تا اینجای کار همه URL های هر فایلی به صورت تصادفی هست و من نیاز دارم که چندین فایل رو زیر یک یوزنیم مشخص مثل arya قرار بدم. اینطوری وقتی قراره یک فایل رو برای همکارم توی شرکت بفرستم خیلی ساده ازش درخواست می‌کنم در سایت به ادرس /arya بره. حالا چطوری اینکارو بکنیم خیلی ساده بجای once یا file, همون username رو می‌نویسیم(توی مثال من از نام arya استفاده می‌کنیم)\n1 2 $ curl -L octocat.ir -F arya=@/tmp/pic.jpg # octocat.ir/arya تا اینجای کار مثلا شما چند بار چند فایل مختلف رو زیر یک یوزنیم قرار دادین حالا چطور میشه همه اونها رو باهم دانلود کرد؟\n1 $ curl -L octocat.ir/arya | wget -i - حالا به این فکر کنید که یکنفر میاد و با یوزنیم های معقول ریکوئست میزنه به سایت و فایل های بقیه رو دانلود می‌کنه، اینجاست که پسورد به کار میاد. برای گذاشتن پسورد روی هر فایل کافیه توی خود URL سایت پسورد رو بعنوان http parametr بنویسد.\n1 2 $ curl -L \u0026#39;octocat.ir/?password=12345678\u0026#39; -F once=@/Desktop/TopSecret.fli # octocat.ir/file/TopSecret/?password=12345678 اینجا دقت کنید که باید از کوتیشن استفاده کنیم چون علامت مساوی و علامت سوال رو bash وایلد کارد می‌بینه.\nبرای دانلود هر فایلی هم که پسورد داره کافیه دقیقا مثل مثال قبلی عمل کنید و پسورد رو توی http parametr وارد کنید\n1 $ wget \u0026#39;octocat.ir/file/TopSecret/?password=12345678\u0026#39; براتون سواله که چرا پسورد روی توی URL گذاشتم؟ می‌شد که مثلا توی http header پسورد بگیریم و بدیم، پس چرا توی URL?\nاینکار برای این هست که دسترسی به فایل ساده باشه. مثلا من وقتی می‌خام فایلی رو برای همکارم بفرستم و خب فرض کنم همکار من از header ها چیزی نمی‌دونه، و فقط با یک کلیک باید بتونه به فایل دسترسی پیدا کنه، اینجاست که من فقط یک URL به اون می‌گم :)\nبعضی از ابزار ها hackable هستند! این به معنی ضعف امنیتی نیست، بلکه به این اشاره می‌کنه ابزار به روشی طراحی شده که کاربران می‌تونند خارج از هدف اصلی اون ابزار از اون استفاه کنند.\nبرای مثال ابزار که من درست کردم برای اشتراک فایل هست، اما بنظرتون میشه یک دایرکتوری و یا یک متن رو هم باهاش به اشتراک گذاشت؟\nقطعا! اما چطوری؟\nبرای اینکه یک دایرکتوری با تمامی ساب دایرکتوری هاش رو بفرستین کافیه از tar استفاده کنید.\n1 2 $ tar -cf - ~/Pictures | curl -L octocat.ir -F once=@- # \u0026#39;octocat.ir/file/_nUiuRPW/ با اینکار با استفاده از tar تمامی فایل ها و دایرکتوری های مثلا پوشه ~/Pictures رو به آرشیو tar تبدیل می‌کنید و بعد خروجی رو بعنوان ورودی به curl می‌فرستین.\nحالا به این فکر کنید که بخواهیم یک متن رو منتشر کنیم، راهکار دقیقا مشابه قبلیه. به این شکل که یک متن رو با استفاده از echo به ورودی استاندارد curl می‌فرستیم.\n1 2 $ echo \u0026#39;Some Random Text\u0026#39; | curl -L octocat.ir -F once=@- # octocat.ir/file/-_W00DSbS/ اینطوری خیلی راحت می‌شه خروجی هر کامندی رو روی به اشتراک گذاشت\nسایت من توی آدرس octocat.ir در دسترسه، خوشحال می‌شم ازش استفاده کنید :)\nاینو بدونید که سایت به صورت دیفالت فایل ها رو برای 24 ساعت نگه‌میداره\nاین سرویس رو منبع باز روی گیتهاب گذاشتم، اگه چیزی خواستید می‌تونید بهش اضافه کنید و یا مشکلاتش رو پچ کنید.\nو اگه می‌خواهید برای خودتون این سرویس رو بیارید بالا از ایمیج داکر استفاده کنید\n1 docker run -p 80:80 mshabane/curlpaste:latest اگه نیاز دارین تا فایل ها برای تایم بالاتری نگه‌داری بشه، متغییر HOURS داخل فایل .env رو تغییر بدین.\nایده های دیگه‌ای هم برای سایت دارم، برای مثال اینکه کاربر بتونه زمان انقضای هر فایل رو خودش مشخص کنه. مثلا به این شکل\n1 curl -L octocat.ir -F arya_1=/path/to/file اینطوری میشه یک زمان انقضا بر اساس ساعت برای هر فایل ایجاد کرد.\nو خب همچنین میشه یک کوتاه کننده لینک هم بهش اضافه کنم، و لینک های کوتاه شده رو ریدایرکت کنم.\n1 curl -L octocat.ir -F url=/path/to/file اگه اینها رو اضافه کنم، این پست رو اپدیت می‌کنم ولی خوشحال می‌شم شما توی این پروژه مشارکت کنید.\n","date":"2024-03-06T23:50:46+03:30","image":"https://bit-orbit.github.io/images/post/curlpaste.jpg","permalink":"https://bit-orbit.github.io/p/crul-paste/","title":"Crul Paste"},{"content":"بیایید قبل از اینکه راه حل را ببینیم، اول مشکل را دقیق تر برسی کنیم. به این فکر کنید که شما یک فایلی دارید که شامل یک عدد است که اشاره می‌کند به مقدار اعتباری که کاربر در حسابش دارد. حالا اگر قرار باشد یک پورسه اون مقدار را بر اساس ارائه سرویسی، از حساب کاربر کم کند، و پروسه دیگری به دلیل افزایش اعتبار، مقداری را به حساب کاربر اضافه کند، چه مشکلاتی اتفاق می‌افتد؟\nبرای اینکه دقیق تر بشیم، این روند رو باهم پیش می‌بریم. فرض کنید فایلی به اسم amount.txt مقدار 100 داخلش نوشته شده است. و دو پروسه کم و اضافه کردن را اجرا می‌کنیم. توی این مثال،‌ ما می‌خواهیم مقدار 20 از حساب کاربر کم و مقدار 50 به حساب کاربر اضافه کنیم، پس ما انتظار داریم در انتها فایل ما مقدار 130 را درونش ذخیره کرده باشد.\nپروسه اول فایل را می‌خواند و مقدار 100 را در حاظه‌اش نگه می‌دارد پروسه دوم فایل را می‌خواند و مقدار 100 را در حاظه‌اش نگه می‌دارد پروسه اول مقدار 20 را از 100 کم می‌کند و مقدار 80 را در حافظه ذخیره می‌کند پروسه دوم مقدار 50 را به 100 اضافه می‌کند و مقدار 150 را در حافظه ذخیره می‌کند پروسه اول مقدار 80 را در فایل ذخیره می‌کند پروسه دوم مقدار 150 را در فایل ذخیره می‌کند همینطور که همه ما انتظار داشتیم، ما باید در این فایل مقدار 130 را ذخیره می‌کردیم، اما پروسه های ما به دلیل اینکه هیچ همکاری و یا هیچ مکانیزمی دیگری ندارند که این مقدار ها را به یکدیگر اطلاع دهند، مشکل Race condition رخ می‌دهد.\nیکی از راه حل های این مشکل lock کردن فایل توسط هر پروسه است، که به این کار file locking گفته می‌شود.\nfile locking یک مکانیزم برای کنترل دسترسی چندین پروسه به یک فایل است.\nتوی لینوکس یکی از دستورات خطرناکی که داریم دستور sudo rm -rf / است. وقتی این دستور را اجرا کنیم کل فایل های لینوکس ما حذف می‌شود. دلیل اینکار این است که لینوکس به صورت پیشفرض فایل های باز شده را lock نمی‌کند.\nبا اینحال لینوکس دو مکانیزم مختلف advisory و mandatory را پشتیبانی می‌کند.\nتوی این پست بیشتر تمرکز من روی مکانیزم advisory locking(مشورتی) است.\nاین روش به این شکل عمل می‌کند که هیچ پروسه‌ای مجبور به اجرای این روش نیست و اگر حتی فایل توسط یک پروسه‌ای lock شده باشد، باز هم پروسه های دیگر می‌توانند به lock بودن فایل اهمیت ندهند و مقدار آن را تغییر دهند. این اتفاق به این دلیل می‌افتد که advisory lock توسط سیستم عامل و یا فایل سیستم انجام نمی‌شود.\nخب بیایید با یک مثال این فرایند را برسی کنیم. مثل مثال قبلی فرض کنید ما مقدار 100 را داخل فایل amount.txt داریم و می‌خواهیم مقدار 20 از آن کم و مقدار 50 به آن اضافه کنیم.\nپروسه اول قبل از خواندن فایل، فایل را لاک می‌کند پروسه دوم برای لاک کردن فایل اقدام می‌کند و از جایی که پروسه اول از پیش فایل را لاک کرده است، برای آزاد شدن لاک صبر می‌کند پروسه اول مقدار 20 را از 100 کم می‌کند و مقدار 80 را درون فایل می‌نویسد پروسه اول لاک فایل را آزاد می‌کند. پروسه دوم فایل را لاک و مقدار جدید 80 را از فایل می‌خواند پروسه دوم مقدار 50 را به 80 اضافه و مقدار 120 را درون فایل می‌نویسد پروسه دوم لاک فایل را آزاد می‌کند تا پروسه های دیگر بتوانند با فایل کار کنند. اگر شما می‌خواهید این مکانیزم را روی یک فایل اجرا کنید، دستور flock برای شما اینکار را خواهد کرد.\n1 flock [options] file|directory command [arguments] این کامند در حالت عادی از شما یک فایل و یک دستور خواهد گرفت و مکانیزم advisory lock را روی ان فایل اجرا خواهد کرد.\n1 flock /tmp/fli echo 12\u0026gt;/tmp/fli برای اینکه روند را بهتر درک کنیم یک فایل bash می‌نویسیم که بتوانیم مثال اولیه را روی آن اجرا کنیم.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 #!/bin/bash file=\u0026#34;balance.dat\u0026#34; value=$(cat $file) echo \u0026#34;Read current balance:$value\u0026#34; #sleep 10 seconds to simulate business calculation progress=10 while [[ $progress -lt 101 ]]; do echo -n -e \u0026#34;\\033[77DCalculating new balance..$progress%\u0026#34; sleep 1 progress=$((10+progress)) done echo \u0026#34;\u0026#34; value=$((value+$1)) echo \u0026#34;Write new balance ($value) back to $file.\u0026#34; echo $value \u0026gt; \u0026#34;$file\u0026#34; echo \u0026#34;Done.\u0026#34; ما این فایل را همزمان با دو ترمینال اجرا می‌کنیم.\nهمینطور که می‌بینید پروسه دوم برای اینکه محتوای فایل را تغییر دهد، باید صبر کند تا لاک فایل آزاد شود.\nاین پست خلاصه‌ای بود از این بلاگ که هر دو نوع advisory lock و mandatory lock را توضیح می‌دهد.\nبرای من سوال بود که من چطور می‌توانم مکانیزمی که flock استفاده می‌کند را در برنامه های خودم پیاده سازی کنم، و خب نتیجه این بود که معمولا برای advisory lock هر زبانی یک کتابخانه استاندار دارد توی پایتون کتابخانه fcntl اینکار را انجام می‌دهد.\n","date":"2024-02-09T01:49:42+03:30","image":"https://bit-orbit.github.io/images/post/flilock.jpeg","permalink":"https://bit-orbit.github.io/p/linux-file-locking-%DA%86%DB%8C%D8%B3%D8%AA/","title":"Linux File Locking چیست؟"},{"content":"هر زبان برنامه نویسی انواعی از داده ها رو داره، مثلا داده های عددی، کاراکتر و یا رشته‌ای از کاراکتر ها. زبان rust هم انواع داده‌ای زیادی رو پشتیبانی می‌کنه و خب حتی اگر جایی کمبودی حس کردین، می‌توانید ساختار داده‌ی خودتان را بسازید.\n‌ انواع داده ترجمه‌ی کلمه data type هست. و خب برای من استفاده از کلمه انگلیسی‌اش خیلی راحت تره.\nنوع داده عدد صحیح همینطور که می‌دونید عدد صحیح از منفی بی‌نهایت تا مثبت بی‌نهایت است(بدون هیچ علامت کسر، رادیکال و بدون اعشار).\nاین نوع داده در rust به این صورت است\n1 2 variable_name: i32 = -2147483648; variable_name: i32 = 2147483647; به این باید دقت کنیم که هر متغییری مقداری فضا نیاز دارد برای مثال این نوع داده که داده اصلی است به پنج صورت پیاده سازی می‌شود i8, i16, i32, i64, i128 اعداد پس از کاراکتر i نشان دهنده تعداد بیت هایی است که این نوع متغییر می‌تواند اشغال کند. مثلا i128 می‌تواند به اندازه 128 بیت فضا اشغال کند.\nنوع داده عدد اعشاری این نوع داده هم مثل نوع عدد صحیح است اما با این تفاوت که اعداد اعشاری را درون خودش ذخیره می‌کند\n1 2 variable_name: f32 = 3.14; variable_name: f32 = -3.14; نوع داده کاراکتر کاراکتر نوع داده‌ای است که فقط یک مقدار از حروف الفبا یا عدد و یا سیمبول را می‌تواند درون خودش ذخیره کند. پس باید به اندازه 8 بیت فضا اشغال کند اما به دلیل اینکه کاراکتر های زبان های دیگر را هم بتواند ذخیره کند از انکدینگ(encoding) utf-16 استفاده می‌کند که 16 بیت فضا اشغال می‌کند.\n1 let a: char = \u0026#39;a\u0026#39;; داده string(رشته‌ای از کاراکتر ها) String نوع داده‌ای است که درواقع رشته‌ای از کاراکتر ها را درون یک نوع vector ذخیره می‌کند.\nاین نکته را هم بگم که encoding رشته UTF-8 است. به این معنی که هر نوع کاراکتری را می‌تواند داخل خودش ذخیره کند حتی ایموجی.\n1 let heart: String = String::from(\u0026#34;♥\u0026#34;); نوع داده منطقی نوع داده منطقی به اسم boolian است. این نوع مقدار هایt true و یا false را ذخیره می‌کند.\n1 let is_good: bool = true; نوع داده ترکیبی این نوع داده ها را توی پست های مجزا توضیح می‌دم.\ntuple array list vector ","date":"2024-01-03T01:30:52+03:30","image":"https://bit-orbit.github.io/images/post/rustdatatypes.jpg","permalink":"https://bit-orbit.github.io/p/%D8%A7%D9%86%D9%88%D8%A7%D8%B9-%D8%AF%D8%A7%D8%AF%D9%87-%D9%87%D8%A7%DB%8C-%D8%A7%D9%88%D9%84%DB%8C%D9%87-%D8%AF%D8%B1-rust/","title":"انواع داده های اولیه در rust"},{"content":"تعریف متغیر در هر زبانی تعریف متغیر سینتکس خودش را دارد. مثلا اگر زبان های خانواده c را کار کرده باشید (مثل c++, c#) متوجه می‌شوید که نوع داده‌ای متغیر، قبل از اسم آن تعریف می‌شود. و یا مثلا توی زبان پایتون تعریف نوع داده‌ای یک متغیر حتی اهمیتی هم ندارد!\nانواع نوع داده یا date types را توی پست بعدی می‌نویسم\nتوی زبان rust بعد از اسم متغیر، نوع آن نوشته می‌شود. مثلا برای تعریف یک متغیر عددی به اندازه یک بایت از کلمه کلیدی i8 بعد اسم استفاده می‌کنیم. البته قبل از اسم هر متغیر هم ما باید از کلمه کلیدی let استفاده کنیم.\n1 2 //let name: type = value; let age: i8 = 22; متغیر های تغییرپذیر توی زبان rust هر متغیری که تعریف می‌کنیم غیر قابل تغیر است. توی مثال بالا من پیشفرض مقدار 22 را برای متغیر age قرار داده‌ام، حالا اگر بخواهم مقدار آن را به 23 تغیر بدهم به ارور می‌خورم\n1 age = 23; 1 2 3 4 5 6 7 8 9 10 error[E0384]: cannot assign twice to immutable variable `age` --\u0026gt; src/main.rs:3:5 | 2 | let age: i8 = 22; | --- | | | first assignment to `age` | help: consider making this binding mutable: `mut age` 3 | age = 23; | ^^^^^^^^ cannot assign twice to immutable variable خب برای همین اگر می‌خواهیم مقدار متغیری را تغییر بدهیم آن را باید از اول مشخص کنیم. مشخص کردن آن با کلمه کلیدی mut بعد از کلمه let است. کلمه mut مخفف mutable به معنی قابل تغییر است. خب بیایید اینکار را برای مثال اولیه انجام بدهیم.\n1 2 let mut age: i8 = 22; age = 23; ","date":"2024-01-01T01:39:05+03:30","image":"https://bit-orbit.github.io/images/post/datatypes-rust.jpg","permalink":"https://bit-orbit.github.io/p/%D9%85%D8%AA%D8%BA%DB%8C%D8%B1-%D8%AF%D8%B1-rust/","title":"متغیر در rust"},{"content":"اوایل که لینوکس نصب کرده بودم کامند هایی که توی فروم های مختلف می‌دیدم و برای من جدید بود را دوست داشتم یاد بگیرم و بدانم کار آنها چی هست، برای همین هر کامندی را که می‌دیدم در اولین فرصت داخل سیستم خودم اجرا می‌کردم. که خب کور کورانه اجرای هر کامندی اشتباهه بود. یکی از این کامند ها که اجرا کرده بودم، به اسم فورک بمب (fork bomb) شناخته می‌شود. کامند به این صورت هست\n1 :(){ :|:\u0026amp; };: اگر این کامند را اجرا کنید(امیدوارم تا الان نکرده باشید) تقریبا زیر یک دقیقه سیستم شما هنگ می‌کند و مجبور می‌شوید سیستم را ریبوت کنید.\nتوی این پست ساختار این کامند را تشریح می‌کنم و باهم کمی bash یاد می‌گیریم.\nبیایید اول با مفهوم recustion آشنا بشیم، زمانی که یک قطعه کد خودش اجرا کند، recusion می‌گویم. مثلا شما یک فانکشن می‌نویسید به اسم fn و توی بدنه فانکشن فقط خود همین فانکشن را صدا می‌‌کنید، به این کار call recursion گفته می‌شود. فورک بمب دقیقا همین کار را می‌کند. به این معنی که خودش را دائم اجرا می‌کند!\nبه این فکر کنید که وقتی یک پراسس خودش را اجرا می‌کند ،مجدد پراسس های اجرا شده توسط اون هم دائم خودشان را اجرا می‌کنند، و دوباره هر پروسه‌ای که اجرا می‌شود بازم خودش را اجرا می‌کند و این روند تا زمانی که رم و پردازنده سیستم تحمل داشته باشد ادامه دارد.\nدرختی که می‌بینید را اجرای فورک بمب درنظر بگیرید، هر ستاره یک پروسه جدید است که توسط پروسه قبلی اجرا شده، و خودش هم دو پروسه جدید باز می‌کند و هر یک از پروسه ها هم همین روند را ادامه می‌دهند.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 * ├── * │ ├── * │ │ ├── * │ │ │ ├── * │ │ │ │ ├── * │ │ │ │ └── * │ │ │ └── * │ │ │ ├── * │ │ │ └── * │ │ │ │ │ └── * │ │ └── * │ │ ├── * │ │ │ ├── * │ │ │ └── * │ │ └── * │ │ ├── * │ │ └── * │ │ │ └── * │ ├── * │ │ ├── * │ │ │ ├── * │ │ │ └── * │ │ └── * │ │ ├── * │ │ └── * │ │ │ └── * │ └── * │ ├── * │ │ ├── * │ │ └── * │ └── * │ ├── * │ └── * من برای اینکه سیستم‌ خودم هنگ نکند فورک بمب را روی داکر اجرا کردم و خب حتی یک ثانیه هم طول نکشید و آن کانتینر کاملا هنگ کرد.\nقبل از اجرا زمان اجرا بیایید وارد کد بشیم، این علامت ها و کاراکتر ها چی هستند؟\nاگه دقت کنید اولین کاراکتر فورک بمب، علامت : است. این علامت اسم فانکشن ما است. برخلاف قانون تعریف نام برای متغییر ها توی bash، می‌توانیم از کاراتر های یونیکد هم برای تعریف نام فانکشن استفاده کنیم، مثلا یک کاراکتر چینی یا حتی ایموجی!\n1 2 3 雨(){ echo \u0026#39;rain\u0026#39;; } ❤️(){ echo \u0026#39;love\u0026#39;; } خب در ادامه علامت های () را می‌بینیم، توی bash برای تعریف فانکشن قبل از اسم فانکشن هیچ کلمه کلیدی مثل fn, def, void و \u0026hellip; نیاز نیست، فقط بجای آن باید بعد از اسم فانکشن پرانتز ها را بگذارید.\nمثل خیلی از زبان های برنامه نویسی، بدنه فانکشن توی کرلی براکت تعریف می‌شود.\n1 :(){} پس تا اینجا ما یک فانکشن ساده با نام : تعریف کردیم.\nداخل بدنه این فانکشن، اسمی که برای فانکشن قرار دادیم همان : را می‌نویسیم. با اینکار دقیقا call recursion را انجام دادیم، و باعث شدیم که برنامه خودش را توی هر اجرا مجدد اجرا کند.\n1 :(){ : } دقت کنید توی سینتکس bash حتما باید یک فاصله برای کدی که داخلی کرلی براکت می‌نویسم قرار بدیم\nعلامت | به اسم پایپ شناخته می‌شود، وظیفه این علامت دادن خروجی یک کامند بعنوان ورودی به یک کامند دیگر هست، حلا دقت کنید که ما خروجی اجرای : را به خودش می‌دهیم. دقیقا به این شکل\n1 :(){ :|: } با این علامت هر پروسه دو بار پروسه جدیدی از خودش می‌سازد اگر از این علامت استفاده نکنیم، پروسه ما به صورت خطی خودش را اجرا خواهد کرد، اینطوری کد ما با یک حلقه while تفاوتی زیادی نخواهد داشت.\nعلامت \u0026amp; اجرای یک کامند را به بکگراند(پس زمینه) می‌برد. برای مثال بعد از اجرای یک دستور باید صبر کنید پروسه آن تمام شود تا بتوانید دستور بعدی را اجرا کنید. ولی اگر از علامت \u0026amp; بعد از هر دستور استفاده کنید، دیگر نیاز نیست صبر کنید تا روند اجرای آن برنامه تمام شود. درواقع با علامت \u0026amp; شما می‌توانید هر برنامه را در بکگراند اجرا کنید. حالا توی فورک بمب این علامت باعث می‌شود تا فانشکنی که اجرا کردین درحالی که کارش به اتمام نرسیده است، فانکشن بعدی اجرا بشود.\nو بعد علامت ; را می‌بینیم. این علامت کامند ها را از هم جدا می‌کند. مثلا شما می‌توانید چند کامند مختلف را توی یک خط بنویسید. توی فورک بمب این علامت فانکشنی که تعریف کردین را از دستور بعدی(که اجرا کننده اون فانکشن هست)جدا می‌کند.\n1 echo \u0026#39;foo\u0026#39;; echo \u0026#39;bar\u0026#39;; echo \u0026#39;baz\u0026#39;; آخرین علامتی که توی فورک بمب داریم همون علامت : یا همون اسمی هست که برای فانکشن قرار دادیم. خیلی ساده توی bash برای اجرای یک فانکشن فقط اسم‌ش را می‌نویسیم.\nو تمام! ما یاد گرفتیم چطور فورک بمب رو بنویسیم و دیگه نیاز نیست حفظ‌ش کنیم :)\n1 :(){ :|:\u0026amp; };: ","date":"2023-12-27T16:39:27+03:30","image":"https://bit-orbit.github.io/images/post/fork_bomb.jpg","permalink":"https://bit-orbit.github.io/p/%D9%81%D9%88%D8%B1%DA%A9-%D8%A8%D9%85%D8%A8-%DA%86%DB%8C%D8%B3%D8%AA-%D9%88-%DA%86%D8%B7%D9%88%D8%B1-%DA%A9%D8%A7%D8%B1-%D9%85%DB%8C%DA%A9%D9%86%D8%AF/","title":"فورک بمب چیست و چطور کار می‌کند؟"},{"content":"به احتمال زیاد سایت google colab رو می‌شناسید، این سایت برای کسانی که پایتون کار می‌کنند یک معجزه‌ست. خیلی راحت شما می‌توانید کد پایتون خود را روی سرور های گوگل اجرا کنید! مثلا اگر قرار باشد یک فایل با حجم خیلی زیاد رو پردازش کنید و خب سیستم خودتون توان پردازش اون فایل رو نداره، این سرویس گوگل واقعا کار رو راحت می‌کنه. حالا فرض کنید این فایل رو باید با تیم به اشتراک بگذارید، خیلی راحت این سروریس به گوگل درایو شما متصل می‌شه و فایل رو براتون آپلود می‌کنه.\nاما من توی این پست می‌خواهم کار متفاوتی با این سرویس انجام بدم، جای اینکه فایل‌م رو توی گوگل درایو آپلود کنم می‌خواهم که یک پلی لیست موزیک راک رو که فایل با فرمت zip هست رو روی google colab دانلود کنم و بعد با همین کولب فایل ها را استخراج و به تلگرام اپلود کنم.\nاینو بگم که خب روی کولب خیلی تریک های جالب دیگه‌ای هم می‌زنند، مثلا من یه تایمی به کولب ssh می‌کردم و بعنوان vpn استفاده می‌کردم.\nادرس سرویس google colab این هست، ولی من یک اسکریپت نوشتم که به اون نیاز داریم برای همین این لینک رو باز کنید تا اسکریپتی که من نوشته‌م توی colab باز بشه. اگه تا الان با برنامه jupyter کار کرده باشین این محیط باید براتون خیلی آشنا باشه. اگر نه، خیلی ساده بگم، این محیط دستورات پایتون رو براتون روی سروس های گوگل ران می‌کنه :)\nخب ما یه فایل این برای مثالمون نیاز داریم، من یک پلی لیست راک از AC/DC که از تورنت می‌گیرم رو برای اینکار استفاده می‌کنم.\nاول من فایل رو باید دانلود کنم، من از تورنت برای دانلود موزیک، فیلم و \u0026hellip; استفاده می‌کنم. پس کافیه لینک تورنت رو به برنامه aria2c بدم و یا فایل رو با یک سایت دانلودر تورنت دانلود کنم و لینک‌ش رو بدم به برنامه wget\nبرای اینکه دستورات خودتون رو اجرا کنید از بالای سایت گزینه + code رو بزنید تا یک code snipp جدید براتون باز کنه. توی این قسمت فقط می‌شه کد های پایتون رو اجرا کرد ولی اگه از علامت ! قبل از دستور استفاده کنیم اون رو بعنوان دستور bash اجرا خواهد کرد. و خب بیس سیستم عامل هم دبیان هست و دستورات دبیانی رو اجرا می‌کنه.\nپس اگه مستقیم قرار بود فایل رو از تورنت بگیرم باید برنامه aria2 رو نصب می‌کردم. برای نصب کافیه این دستور رو بزنیم\n1 !sudo apt-get install aria2 دقت کنید که از علامت ! قبل از دستور استفاده کردم.\nبعد از نصب، لینک رو می‌دیم به برنامه تا فایل ها رو برامون دانلود کنه.\n1 !aria2c \u0026#39;\u0026lt;your magnet link\u0026gt;\u0026#39; به این دقت کنید که برنامه با کامند aria2c اجرا می‌شه. ولی با به اسم aria2 نصب می‌شه.\nو یا اینکه لینک دانلود مستقیم رو به برنامه wget می‌دیم. این برنامه به صورت دیفالت نصب هست و لازم نیست کار خاصی بکنیم.\n1 !wget \u0026#39;\u0026lt;your file link\u0026gt;\u0026#39; بعد از اینکه فایل روی سرور گوگل دانلود شد کافیه فایل رو به تلگرام آپلود کنیم! ولی قبل‌ش چند کاری هست که باید باهم بکنیم.\nفایل من زیپه پس باید استخراج کنم. فایل ها توی دایرکتوری های تو در تو قرار دارند، و باید همه فایل های مورد نظرم رو که توی این مورد mp3 هستند رو بیارم داخل پوشه‌ای که اسکریپت دیفالت آنجا ران می‌شه. نیاز به یک کانال تلگرام دارم که فایل ها مستقیم اونجا اپلود بشوند یک توکن ربات تلگرام هم نیازه که با استفاده از دسترسی ربات به کانال، فایل ها رو اپلود کنیم. خب برای اسختراج فایل ها خیلی ساده از کامند unzip و اسم فایل جلوی این کامند استفاده می‌کنیم.\n1 !unzip \u0026lt;your file name\u0026gt; با کامند ls نام فایلی که دانلود کردین رو می‌تونید ببینید.\nبا اجرای کامند tree می‌تونید دایرکتوری های تو در تو رو ببینید.\nتوی این مرحله من همه فایل های mp3 رو باید بیارم توی پوشه اصلی که اسکریپت‌ اپلود اجرا میشه، دلیل این کار این هست که این اسکریپ‌ت فقط فایل های mp3 داخل همین پوشه رو پیدا و اپلود می‌کنه.\nبرای انتقال این فایل ها از پوشه های تو در تو به یک پوشه از کامند find استفاده می‌کنم و هر فایل که پیدا می‌شه رو با کامند mv به پوشه اصلی‌مون انتقال می‌دم.\n1 !find . -type f -iname \u0026#39;*mp3\u0026#39; -exec mv {} . \\; بیایید سوییچ های این دستور رو بهتون بگم\ntype- این سوییچ انواع نوع فایل ها رو مشخص می‌کنه. مثلا شما می‌تونید دنبال یک دایرکتوری، فایل، سوکت و \u0026hellip; بگردین\niname- این سویچ که مشخص هست نام فایل رو ازتون می‌گیره که شما می‌تونید پترن ریجکس بدین بهش. و اون i مشخص می‌کنه که نام فایل به کوچیکی و بزرگی حساس نباشه.\nexec- یک کامندی رو ازتون می‌گیره و روی تک تک ریزالت های جست و جو اون کامند رو اجرا می‌کنه. من کامند mv رو دادم که برای انتقال فایل استفاده می‌شه. علامت های {} هم یک متغییر هست که نام فایل تک به تک جای اون قرار می‌گیره.\nپایان سوییچ exec همیشه با ;\\ مشخص می‌شه.\nخب تا اینجا که خیلی ساده بود،‌ نه؟\nمرحله آخر اینه که یک ربات با این ربات بسازین، و بعد اون رو عضو یک کانالی که می‌سازید بکنید، کانال رو فعلا پابلیک بسازید و یک یوزرنیم بهش بدین.\nتوکن ربات رو کپی کنید و توی اسکریپت من، جایی که نوشته وارد کنید و توی قسمت هم ایدی کانالتون رو با علامت @ اول جایگذاری کنید.\nاگه کانال پرایوت دارید باید بجای ای‌دی کانال از chatid استفاده کنید، که یک ای‌دی عددی هست.\nتمام!‌ کافیه برنامه رو اجرا کنید و کانال تلگرامتون رو نگاه کنید :)\nاگه خیلی زیاد دارین فایل اپلود می‌کنید احتمالا تلگرام ارور flood mood بهتون بده. توی این مورد کافیه فقط صبر کنید، اسکریپت از اجرا قطع نمی‌شه و روی همون فایل مجددا اجرا می‌شه تا بالاخره فایل اپلود بشه.\nهرچیزی رو می‌تونید آپلود کنید ولی دقت کنید که ربات ها محدودیت حجم اپلود دارن که نهایتش 50MB هست\nاینم بگم که توی اسکریپت اگه mp3 رو به چیز دیگه‌ای تغییر بدین، اسکریپت به دنبال اون پسوند ها خواهد گشت.\n","date":"2023-12-18T00:08:38+03:30","image":"https://bit-orbit.github.io/images/post/colab.jpg","permalink":"https://bit-orbit.github.io/p/%D8%A7%D8%B2-%DA%AF%D9%88%DA%AF%D9%84-%D8%A8%D9%87-%D8%AA%D9%84%DA%AF%D8%B1%D8%A7%D9%85/","title":"از گوگل به تلگرام!"},{"content":"چطور این ایده به ذهن من رسید ؟ جریان این ایده به این شکل بود که خب ما ایرانی ها اینترنت به شدت محدود شده‌ای داریم، برای همین ما برای استفاده از اینترنت از vpn و یا proxy استفاده می‌کنیم. اما زمانی که ما وارد سایت های داخلی می‌شویم این سایت ها اجازه استفاده با ip خارج از ایران رو نمی‌دن و ما مجبور می‌شویم که vpn رو که به هزار زحمت وصل شده بود، قطع کنیم. خب چاره چیه؟ اینکه اگه یک سیستم توی خونه یا شرکت دارین که همیشه روشنه رو تبدیل به یک سرور کنیم :)\nتوی این فکر بودم که نیازم رو به چنین سیستم عاملی حس کردم، بعد کمی نیاز های دیگه رو بهش اضافه کردم و یه پست داخل تلگرام نوشتم، یکی کامنت گذاشت و خب این سیستم عامل را معرفی کرد.\numbrel چیست ؟ درواقع umbrel یک سیستم عامل است، زمانی که شما این سیستم عامل را نصب کنید، یک صفحه وب در اختیار شما می‌گذارد و شما از طریق این صفحه درون مرورگر خود می‌توانید به سیستم دسترسی داشته باشید. برای مثلا می‌توانید سرویس های مختلف و ابزار های مختلف را روی umbrel نصب و یا کانفیگ کنید.\nسرویس هایی که umbrel ارائه می‌دهد تقریبا همان سرویس هایی هستند که شما در طول روز از نسخه های تجاری آنها استفاده می‌کنید.\nاگه دقیق تر بخواهم بگم، این سیستم عامل یک store در اختیار کاربران‌ش قرار می‌ده. و خب این یکی از مهم ترین کار هایی است که این سیستم عامل انجام می‌ده چرا که اگر این استور وجود نداشت، شما شخصا باید فرایند کانفیگ و نصب سرویس ها را به عهده می‌گرفتید(این کار یک متخصص دواپس هست، خیلی هم جالیه)\numbrel چه نیازی را برطرف می‌کند ؟ وقتی از سرویس های تحت اینترنت استفاده می‌کنید، به احتمال زیاد شما کالای اون شرکتی هستید که ابزار را در اختیارتون قرار داده است. اگر دقت کنیم می‌بینیم که این شرکت ها بسیاری کاربر دارند و خب برای ارائه درست خدمت به کاربرانشون سرور های زیادی اجاره می‌کنند سرویس ها رو دائم اپدیت و بهتر می‌کنند و خب سرویس های متعددی هم ارائه می‌کنند.\nهمه این کار ها نیاز به هزینه های زیادی دارند، بودجه این شرکت ها فقط و فقط با تبلیغات تامین نمی‌شود بلکه با فروش اطلاعات کاربرانشون(خود ما) به شرکت ها و دولت ها تامین می‌شود.\nو البته اگر حتی شما برای سرویسی که استفاده می‌کنید هزینه‌ای پرداخت کنید، مثلا برای استفاده از گوگل دایو ماهانه هزینه هم پرداخت کنید، باز هم مشکلاتی وجود دارد، مثلا قانونا گوگل مالک فایلی است که شما روی سرور هایش آپلود می‌کنید.\nدر چنین مواقعی هست که اصطلاح self-hosting سرویس ها استفاده می‌شود. به این معنی که سرویس هایی که شما روزانه از آن استفاده می‌کنید را خودتان راه اندازی کنید. اما اینکار نیاز به دانش بالایی داره.\nسیستم عامل umbrel این کار را ساده کرده است، با این تفاوت که قبلا شما باید برای استفاده چند ابزار روی یک سرور، باید سرور رو به درستی کانفیگ می‌کردین سپس ابزار ها را کانفیگ، و بعد سرویس ها راه اجرا می‌کردین. اما الان فقط با یک کلیک شما سرویس توییتر خود را راه اندازی می‌کنید!\numbrel به روی سیستم عامل دسکتاپ نصب umbrel بسیاز سادهست فقط کافیه یک سیستم عامل debian رو روی سیستمتون داشته باشید، یک ترمینال باز کنید و کامند نصب را بزنید، با یک کامند این سیستم نصب می‌شه.\nولی خب اگر سیستم عاملی ندارید که بر پایه debain باشه، می‌شه به سادگی روی ماشین مجازی یک دبیان نصب کنید، حالت شبکه اون سیستم عامل رو bridge قرار بدین که IP پابلیک رو از DHCP بگیره و خب تحت LAN در دسترس قرار بگیره. خیلی ساده توی مرورگر IP سیستم debain که umbrel را روی ان نصب کردین را وارد کنید و تمام!\numbrel به روی رزبری پای رزبری پای! یک سخت افزار کوچک که تقریبا یک کامپیوتر کامل است! البته که قدرت پردازش بالایی ندارد ولی در IOT استفاده زیادی دارد. با توجه به اینکه پردازنده های رزبری پای از نوع arm هستند، با اجرای کامند نصب به روی سیستم عاملی که دیفالت به روی رزبری پای نصب است نمی‌توان umbrel را نصب کرد، برای همین سیستم عامل umbrel یک نسخه مخصوص برای رزبری پای دارد، کافیست آن را دانلود و به روی ربزی خود نصب کنید.\nبه این دقت کنید که خب سعنی کنید یک هارد اکسترنال به رزبری متصل کنید که فضای کافی برای سروریسی مانند next cloud داشته باشید.\numbrel بروی سرور شخصی به سادگی اچرای یک کامند! کافیست فقط سیستم عامل سرورتون debain و یا کلا بر پایه debian مثل ubuntu باشه. کامند اجرا را وارد کنید و بعد از اتمام فرایند نصب، IP سرور را وارد مرورگر کنید، تمام!\nدستگاه umbrel شرکت سازنده umbrel به جز سیستم عامل، یک دستگاهی طراحی کرده است که به صورت پیشفرض سیستم عامل umbrel به روی آن نصب شده است. این دستگاه تمامی سخت افزار مورد نیاز رو برای استفاده از سیستم عامل دارد. برای مثال اگر شما از umbrel به روی rassbery PI استفاده می‌کنید، شما نیاز به یک فن دارید تا این دستگاه را دائم خنک کند، از طرفی خود فن هم باید خنک شود.\nاینجاست که این دستگاه رو برای شرکت یا خانه‌ شما مناسب‌تر می‌کند(مطمئن باشید تبلیغ نمی‌کنم)\numbrel چطور کار می‌کند ؟ اگه بخواهم کمی فنی‌تر وارد ماجرا بشم، همونطور که گفت این سیستم عامل بهترین ویژگی که ارائه می‌کند store آن است. البته که اینجا store به معنی فروشگاه نیست، بلکه شبیه یک بازاری است که همه اجناس‌ش رایگان است :)\nسرویس های umbrel همه سرویس هایی هستند که به صورت منبع باز در اختیار همه قرار گرفته است، این سرویس ها برای اجرا شدن نیاز به شخصی دارد که دانش کافی از سرور داشته باشد و خب نحوه کانفیگ کردن هر کدام از ابزار ها و سرویس ها را بداند.\nدانلود و نصب هر سرویس به صورت جدگانه ممکن است به مشکلات متعددی برخورد کند، مثلا در نصب سرویسی مثل nexcloud شما ممکن است نیاز به ورژن خاصی از php داشته باشید. کانفیگ کردن nginx برای اجرای اسکریپت های php هم واقعا به اندازه زیادی دردسر دارد.\nاینجاست که داکر وارد ماجرا می‌شود! umbrel از قبل تمامی سرویس ها را داکرایز کرده است.\nداکرایز به چه معنیست؟ درواقع به این فکر کنید که شما یک برنامه را می‌خواهید نصب کنید، این سرویس توسط سازنده آن از ورژن خاصی از زبان مشخصی، لایبراری و فایل هایی استفاده کرده است که پیشفرض روی سیستم شما نصب نیست، در این مواقع وظیفه نصب آن فایل ها به عهده شماست. داکر این کار را ساده کرده است به این صورت که برنامه را با تمامی نیازمندی هایش داخل یک فایل image قرار داده است، و بعد کافیست شما آن فایل را به برنامه docker engine بدهید، آن برنامه باید بدون هیچ مشکلی اجرا شود.\nسیستم عامل umbrel دقیقا چنین کاری می‌کند. تمامی image های داکیرایز شده را در store برای شما شما لیست می‌کند، شما کافیست که دکمه install را بزنید، بنگ! سرویس شما آماده است :)\nامنیت اگر umbrel را به روی چیزی به جز سرور دارید، حتی اگر برای آن یک دامنه هم بگیرید، umbrel اجازه دسترسی به سیستم عامل را از طریق اینترنت به شما نمی‌دهد. برای اینکار شما باید از طریق tor به آن متصل شوید و یا یک VPN سرور داخل شبکه داخلی خود راه اندازی کنید.\nالبته umbrel به جز tor یک راه دیگر هم در اختیار کاربران قرار داده است، سرویسی VPN به نام tailscale که مستقیم به روی umbrel نصب می‌شود.\nسرویس های کاربردی umbrel matrix خیلی ساده بگم، می‌تونید با این سرویس telegtam خودتون رو راه اندازی کنید. برای اینکه بیشتر درباراه این سرویس بدونید، این پست من را بخوانید.\nnextcloud خیلی شبیه به گوگل درایو است، به جز نسخه وب حتی یک اپ اندروید هم دارد که می‌توانید آدرس nextcloud را درون آن وارد کنید و از هرکحا به فضای خودتون دسترسی داشته باشید. و خب حتی بعنوان ادمین برای افراد خانواده و یا شرکت‌تون اکانت بسازید، و فضای شخصی خودشان را در اختیارشان قرار بدین.\nqbittorrent اگر تورنت را می‌شناسید، قطعا این کلاینت معروف را هم باید بشناسید، این کلاینت یک نسخه وب دارد که داخل فروشگاه umbrel قرار دارد. فایل های خود را برای دانلود به این کلاینت بدین و در زمانی که از اینرنت استفاده نمی‌کنید مثلا 2 تا 7 صبح آن ها را بگذارید تا دانلود بشوند.\npi-hole برای خلاص شدن از تبلیغات اینترنت کافیه این سرویس DNS را به روی umbrel نصب کنید و سپس DHCP را تنظیم کنید که IP این سرویس را به دیگر دستگاه های شبکه بدهد.\nJellyfin یکی از نیاز های واقعا اساسی من، این سرویس است. فیلم هایی که می‌بینم، و یا قرار است که ببینم‌شون رو می‌تونم با این سرویس به درستی دنبال کنم. در اصل این سرویس برای پخش کردن فیلم ها ساخته شده‌ است. به این شکل که شما کافیست فیلم های خود را وارد jellyfin کنید، بعد از هرکحا و هر دستگاهی داخل مرورگر می‌توانید فیلم ها رو تماشا کنید، مثلا اگر تلویزیون هوشمند دارید کافیست از طریق مرورگر آن وارد umbrel خود بشین.\n-snapdrop\nسرویس خیلی ساده‌ای است که برای انتقال فایل داخل شبکه لوکال استفاده می‌شود.\nwhoogle search البته whoogle یک موتور جست و جوی meta است، به این معنی که خودش وب را خزش نمی‌کند و از موتور های جست و جوی دیگر برای نتیجه جست و جوی شما استفاده می‌کند.\nLlamaGPT چیزی شبیه ChatGPT ولی افلاین و کاملا خصوصی.\nراه اندازی سرویس های شخصی خیلی از سرویس ها هنوز به umbrel اضافه نشده. اضافه کردن سرویس به خود store هم کار سختی نیستی، کافیه فقط داکرایز کردن رو بلد باشین.\ncache server کش سرور ها معمولا با transparent proxy بدون اینکه کاربران متوجه پروکسی بشوند پیاده سازی می‌شوند. کار آنها کاهش مصرف ترافیک است.\nیکی از سرویس هایی که خیلی از شرکت ها برای کاهش هزینه های اینرنت و یا خب برای بهبود سرعت اینترنت می‌کنند، ارائه cache server هست.\nخیلی خلاصه بگم کش سرور محتوایی که کاربران بازدید می‌کنند را درون خود برای مدتی و با شرایطی از پیش تعیین شده نگه ‌می‌دارد و هر بار که کاربران به محتوای قبلی درخواست بدهند، دیگر آن ریکوئست تا سایت اصلی نمی‌رود و خود کش سرور که در شبکه داخلی است جواب آن را می‌دهد\n","date":"2023-12-11T01:39:34+03:30","image":"https://bit-orbit.github.io/images/post/umbrel.webp","permalink":"https://bit-orbit.github.io/p/cloud-%D8%B1%D8%A7-%D8%A8%D9%87-%D8%AE%D8%A7%D9%86%D9%87-%D8%AE%D9%88%D8%AF-%D8%A8%D8%A8%D8%B1%DB%8C%D8%AF/","title":"cloud را به خانه خود ببرید!"},{"content":"یکسری مفاهیمی در برنامه نویسی داریم که من تصمیم داریم درباره آنها توی چند پست توضیح بدم، اولین مورد که شامل این پست می‌شه تفاوت static linking و dynamic linking در زبان های برامه نویسی هست‌ش. مفاهیم دیگه‌ای که داخل پست های بعدی می‌نویسم چیز هایی مثل static type, dynamic type, compiler language, interpreter language و \u0026hellip; خواهد بود.\nدو مفهموم static linking و dynamic linking چه هستند؟\nهر کدام چه مشکلات و فوایدی دارند؟\nما در نوشتن برنامه ها معمولا از لایبراری های زیادی استفاده می‌کنیم، حتی یک برانامه ساده. سیستم ما برای اجرای یک برنامه، کد برنامه رو به ماشین-کد تبدیل می‌کنه و بعد خط به خط اون ها رو اجرا می‌کنه.\nاصطلاح linking به روندی گفته می‌شود که کد شما به اشیاء(کد و داده) های خارجی برای استفاده از انها اشاره کند. معمولا دو روش برای اینکار وجود دارد، static linking(لینک کردن ایستا), dynamic linking(لینک کردن پویا).\nstatic linking زمانی اتفاق می‌افتد که کامپایلر منابع خارجی(لایبراری) ها را داخل فایل اجرایی برنامه کپی کند\nدر واقع در این روش برنامه شما تمامی لایبراری هایی که شما در کد استفاده کردین رو با کد شما درون یک فایل اجرایی کامپایل می‌کند، زمانی که برنامه اجرا شود، تمامی لایبراری های مورد نیازش وارد مموری کامپیوتر می‌شود.\nفایده هایی که می‌تونم بهش اشاره کنم\nتوی منتشر کردن برنامه به دیگران، مشکل نصب کامپوننت ها رو دیگه ندارن، و به راحتی اجرا می‌کنند. ممکنه برنامه اندکی سریع تر اجرا بشه این روش واقعا خوبیه ولی خب معایب خودش رو هم داره\nفایل اجرایی حجم زیادی‌تری نسب‌ت به لینک کردن پویا داره وقتی برنامه اجرا بشه، بخاطر اینکه همه لایبراری و داده های مورد نیاز داخل همان فایل اجرایی بود، برنامه رم زیادی استفاده می‌کنه. اگر لایبراری های مورد استفاده تغییر کنند، برنامه نویس باید مجدد برنامه رو کامپایل و منتشر کنه dynamic linking لینک کردن پویا زمانی است که نام لایبراری خارجی در زمان اجرا وارد فایل اجرایی می‌شود. و اینکه فقط در این زمان است که لایبراری مورد نیاز وارد مموری می‌شود.\nدر این مواقع لایبراری ها باید در سیستم عامل از قبل نصب شده باشند، و یا در موقغ نصب برنامه جدید اون لایبراری ها نصب شوند. و اگر هر تغییری در لایبرار رخ بده، برنامه نویس نیاز نیست دوباره برنامه رو کامپایل و منتشر کند، فقط لایبراری مورد نیاز اپدیت می‌شود.\nاین روش هم مزیت های خودش رو داره، مثلا:\nحجم فایل های اجرایی خیلی کمتری داره تا زمانی که نیاز به لایبراری نشده باشد(اگر در کد نویسی رعایت شده باشه) لایبراری ها رم اشغال نمی‌کنند. مهمترین عیبی که می‌تونه این روش داشته باشه اینه که حذف شدن و یا خراب شدن لایبراری باعث می‌شه برنامه دیگه اجرا نشه.\nاین مطلب خلاصه‌ای کلی بود برای آشنایی با این دو مفهموم برای مطالعه بیشتر این لینک می‌تونه مفید باشه.\n","date":"2023-11-03T00:21:46+03:30","image":"https://bit-orbit.github.io/images/post/staticvsdynamic.jpg","permalink":"https://bit-orbit.github.io/p/%D8%AA%D9%81%D8%A7%D9%88%D8%AA-staticlink-%D9%88-dynamiclink-%D8%AF%D8%B1-%D8%B2%D8%A8%D8%A7%D9%86-%D9%87%D8%A7%DB%8C-%D8%A8%D8%B1%D9%86%D8%A7%D9%85%D9%87-%D9%86%D9%88%DB%8C%D8%B3%DB%8C/","title":"تفاوت Staticlink و Dynamiclink در زبان های برنامه نویسی"},{"content":"دوست داشتن لینوکس واقعا دلایل زیادی داره و احتمالا هر کسی به دلیل خاصی لینوکس رو دوست داره. مثلا یکی ممکنه آزادی‌اش رو دوست داشته باشه یکی دیگه از پکیج منیجر علاقه رو به لینوکس پیدا کرده باشه و \u0026hellip;\nمن ترمینال قدرتمند لینوکس رو دوست دارم، چیزی که هیچوقت توی ویندوز تجربه نکرده بودم. یکی زیبایی های ترمینال برای من ترکیب ریزالت برنامه‌های مختلف با یکدیگر و بدست اوردن نتیجه جدیده\nمثلا بابام برای چندین پست فرستاد که هر پست شامل چهار یا پنج لینکه که من باید همه‌ش رو دانلود کنم، درحالت عادی اگر روی ویندوز بودم خب باید هر لینک رو کپی می‌کردم و بعد وارد دانلود منیجر می‌کردم برای دانلود. ولی خب ما مجهزیم به قدرت ترمینال لینوکس :)\nخب من کاری که می‌کنم اینه که متن پست ها رو کپی می‌کنم و توی یک فایل می‌ریزم اینطوری هم متن های فارسی پست ها و هم لینک های فایل ها رو دارم\nبعد با دستور grep با یک پترن ساده regex همه لینک ها رو از متن های فارسی جدا می‌کنم و داخل یک فایل دیگه می‌ریزم. این پترن به این شکل هست که می‌گه هر خطی که اولش http باشه رو پیدا کن.\n1 cat dl.txt | egrep \u0026#39;^http\u0026#39; \u0026gt; dl.lst و تمام، همه لینک ها رو یکجا آماده دارم، حالا کافیه با یک دستور همه فایل ها رو دانلود کنم.\n1 wget -c -i dl.lst خب بعد از دانلود شدن فایل ها، یک مشکلی که دارم این هست که هر پست شامل تمامی درس های یکی از فصل هایی هست که بابام می‌بینه. من باید فایل ها رو براساس فصل هاشون داخل دایرکتوری های مشخص خودش قرار بدم. اینم یک راهکار خیلی ساده داره. اسم فایل ها به این شکل هست که فصل رو داخلش نوشته Option402-J04-01.mp4 کافیه با یه وایلد کارت هر فصل رو جدا کنم و داخل دایرکتوری خودش بریزم\n1 2 3 4 mv Option402-J04* j04 mv Option402-J05* j05 mv Option402-J06* j06 mv Option402-J07* j07 این یک مثال ساده‌ای بود که می‌تونستم بزنم برای توضیح اینکه چرا لینوکس برام جذاب تره و کارم رو ساده تر می‌کنه.\n","date":"2023-07-07T02:45:19+03:30","image":"https://bit-orbit.github.io/images/post/ill.png","permalink":"https://bit-orbit.github.io/p/%DA%86%D8%B1%D8%A7-%D9%84%DB%8C%D9%86%D9%88%DA%A9%D8%B3-%D8%B1%D9%88-%D8%AF%D9%88%D8%B3%D8%AA-%D8%AF%D8%A7%D8%B1%D9%85/","title":"چرا لینوکس رو دوست دارم؟"},{"content":"پشت فیلم blade runner ایده جذابی هست که من خیلی دوست دارم. کلیت داستان به این شکل هست که دنیا تونسته از انسان clone هایی بسازه و از اونها برای پیشرفت و کار های سخت استفاده کنه، مثلا توی جنگ بجای سرباز واقعی استفاده می‌شن، اگه قراره ماموریت خطرناکی مثل اکتشاف توی فضا و یا دستگیری یک مجرم خطرناک کسی رو بفرستن، چی بهتر از یه کلون که جون انسان واقعی به خطر نیوفته؟\nاما از جایی به بعد کلون ها تغییر می‌کنند و دیگه برده بودن رو قبول نمی‌کنن، سعی می‌کنن فرار کنند و دستور انسان ها سرپیچی کنند. اما اینکار هم فایده‌ای نداره، چون انسان ها کلون های دیگه‌ای می‌سازند که کارشون پیدا کردن و کشتن کلون هایی هست که فرار کردن، به این شغل که مامولا شغل کلون ها هست می‌گن blade runner.\nاین روند یکم شبیه یک loop هست، ساخت clone هایی که clone ها رو بکشه درصورتی که همین clone ها فرار می‌کنند و دوباره clone های دیگه‌ای میان سراغ اینها.\nباید بگم که balde runner چندین سری فیلم هست، حتی یک سریال انیمیشنی هم داره.\n","date":"2023-06-24T22:02:35+03:30","image":"https://bit-orbit.github.io/p/blade-runner/37_hu3cdd9fdad8fe6b2ec9e5aad4f67a1dde_1098369_120x120_fill_box_smart1_3.png","permalink":"https://bit-orbit.github.io/p/blade-runner/","title":"Blade Runner"},{"content":"ماتریکس یک پروتکل آزاد است! به این معنی که شما میتوانید از این پروتکل برای ارتباطات تحت شبکه مانند پیامرسان، اینترنت چیز ها (IoT) و هر چیز دیگری استفاده کنید. از ویژگی های این پروتکل، رمزنگاری سر تا سر (E2E) است، این ویژگی باعث میشود حتی سرور های ماتریکس که داده های ما را منتقل میکنند هم توانایی دسترسی به داده ها را نداشته باشند.\nپیام رسان ماتریکس یکی از اصلی ترین استفاده های ماتریکس، پیامرسان است. این پیامرسان به صورت غیر متمرکز عمل میکند. با این روش سانسور/فیلتر شدن سرور هایی که پیام ها را ذخیره و منتقل میکنند غیر ممکن میشود! چرا که این سرور ها قابل تغییر هستند و هر زمان که یکی از این سرور ها سانسور شود، شما همچنان میتوانید با سرور دیگری مجدد اکانت بسازید و در ارتباط بمانید. و یا حتی از سرور خودتان استفاده کنید!\nماتریکس چگونه کار میکند؟ هر سرور در ماتریکس HomeServer نامیده میشود، شما به عنوان Client انتخاب میکنید از هر HomeServer که میخواهید استفاده کنید.\nHomeServer ها میتوانند سرور های عمومی مثل سروری که خود ماتریکس راه اندازی کرده است باشد و یا میتواند سرور های شخصی خودتان باشد.\nزمانی که شما از یک HomeServer استفاده میکنید، این به آن معنی است که کلاینت شما به اکانتتان در آن HomeServer متصل میشود.\nزمانی که شما پیامی ارسال میکنید، پیامتان به HomeServer شما ارسال میشود، HomeServer بعد از دریافت پیام از شما، آن را به کاربران مشترک در آن روم ارسال میکند.\nدر ماتریکس هر نوع چت(شخصی و یا گروه) را room مینامند\nدر واقع زمانی که شما پیامی ارسال میکنید HomeServer پیام را برای کاربران ارسال میکند. این کاربران ممکن است کاربران همان HomeServer و یا کاربران HomeServer های دیگری باشند. پس پیام شما اگر برای کاربران یک HomeServer دیگر باشد، Homeserver شما بعد از دریافت پیامتان، پیام را برای HomerServer های دیگر ارسال خواهد کرد. و آن HomeServer پیام را دریافت و به کاربران مربوطه ارسال خواهد کرد.\nزمانی که شما پیامی را برای کاربر HomeServer دیگری ارسال میکنید، پیام شما تنها در HomeServer خودتان ذخیره نخواهد شد. بلکه در HomeServer کاربری/کاربرانی که پیام را به آن ارسال کرده اید هم ذخیره میشود.\nاصطلاحات در ماتریکس در ماتریکس چند اصطلاح وجود دارد که آشنایی با آنها به درک بهتر این پروتکل کمک میکند.\nHomeServer: سروری که شما در آن اکانت خود را میسازید. این سرور پیام های شما را ذخیره و ارسال میکند.\nClient: برای اینکه کاربران بتوانند از ماتریکس استفاده کنند، باید از ابزاری که از این پروتکل بهره میبرد استفاده کنند. به اینگونه از ابزار ها کلاینت گفته میشود.\nEvent: هر نوع داده ای که توسط ماتریکس ارسال شود event نامیده میشود. برای مثال ممکن است شما پیام ارسال کنید و یا به یک پیام واکنش نشان دهید.\nRoom: قسمتی است که کاربر با آن event ها را دریافت و ارسال میکند. event ها به room ارسال میشوند، و تمامی کاربران مشترک در room میتوانند event ها را دریافت کنند.\nSpace: Space نوعی خاصی از room برای دسته بندی دیگر room ها است. space میتواند هم شامل گروه و هم کاربران عادی شود.\nBridge: پل یا Bridge به راهکاری گفته میشود که شما میتوانید با استفاده از آن بین ماتریکس و پیامرسان های دیگر چت کنید. برای مثال شما با استفاده از Brdige تلگرام میتوانید با ماتریکس به کاربران تلگرام پیام ارسال و دریافت کنید.\nچگونه از ماتریکس استفاده کنیم؟ برای استفاده از ماتریکس، شما کافیست یکی از کلاینت های آن را نصب و به یک HomeServer متصل شوید.\nیکی از محبوب ترین کلاینت ها، کلاینت Element است، که شامل نسخه Android، IOS، Windows, Linux، Mac و البته نسخه تحت وب میشود.\nاستفاده از المنت مانند هر پیامرسان دیگری ساده است، اما اگر نیاز به کمک دارید این لینک میتواند کمکتان کند.\nچطور از سرور شخصی خودمان استفاده کنیم؟ شما مجبور نیستید سرویس ماتریکس را روی سرور شخصی خودتان اجرا کنید مگر اینکه:\nسرور های عمومی ماتریکس سانسور و از دسترس خارج شده باشند و یا شاید نگران دیتایی هستید که روی سرور های عمومی ماتریکس از طرف شما ذخیره میشود!(گرچه پیام ها تماما رمزنگاری سر تا سر میشود) و یا حتی شاید میخواهید پیام رسان داخلی شرکت/خانه خودتان را داشته باشید و یا البته ممکن است بخواهید Bridge بسازید. نسخه سرور ماتریکس Synapse نام دارد، شما میتوانید با استفاده از ایمیج داکر رسمی ماتریکس، سرور شخصی خودتان را اجرا کنید.\nنتیجه گیری هدف من از نوشتن این پست در این روز های تلخ این بود که ابزاری را معرفی کنم تا ما با وجود قطعی های متعدد اینترنت و قطع دسترسی ما از سرور های خارجی، کماکان در ارتباط نگهدارد و صدایمان را\u0026hellip;\nاگر روزی دسترسی ما از اینترنت قطع شد، کاری که لازم است برای در ارتباط ماندن انجام بدهیم این است که یک سرویس ماتریکس داخلی راه اندازی کنیم.\n","date":"2022-10-01T01:46:23+03:30","image":"https://bit-orbit.github.io/images/post/matrix.jpg","permalink":"https://bit-orbit.github.io/p/%D8%A7%D8%B1%D8%AA%D8%A8%D8%A7%D8%B7-%D8%BA%DB%8C%D8%B1-%D9%85%D8%AA%D9%85%D8%B1%DA%A9%D8%B2-%D9%88-%D8%AF%D8%B1-%D9%84%D8%AD%D8%B8%D9%87-%D8%A8%D8%A7-%D9%BE%D8%B1%D9%88%D8%AA%DA%A9%D9%84-%D9%85%D8%A7%D8%AA%D8%B1%DB%8C%DA%A9%D8%B3/","title":"ارتباط غیر متمرکز و در لحظه با پروتکل ماتریکس"},{"content":" ما زمانی که برنامه‌ای در ترمینال اجرا می‌کنیم برای کپی کردن ریزالت اون برنامه، با موس تکست رو سلکت می‌کنیم و بعد کپی می‌کنیم. اما می‌دونیم که توی لینوکس ما pipe رو داریم. پایپ کردن به این معنی است که شما یک برنامه رو اجرا می‌کنید و ریزالت اون برنامه رو بعنوان ورودی به یک برنامه دیگر می‌دهید. و خب کاش می‌شد با پایپ کردن، متنی کپی بشه!\nبرنامه‌ای ساده نوشتم که این کار رو برای ما به سادگی انجام بده.\nمثلا ما می‌خواهیم لیست فایل ها و دایرکتوری های داخل پوشه /var/ رو کپی کنیم. می‌دونیم که دستور ls میاد و لیست فایل ها رو می‌گیره، کافیه این رو پایپ کنیم به clp تا این لیست به کلیپ برد کپی بشه.\nls /var | clp\nبرای نصب این چند دستور رو می‌تونید اجرا کنید:\n1 2 3 4 cd /tmp/ \u0026amp;\u0026amp; wget \u0026#39;https://raw.githubusercontent.com/shabane/clp/master/clp.py\u0026#39; cp clp.py ~/.local/bin/clp chmod +x ~/.local/bin/clp clp -h و خب می‌تونید برای دیدن مثال ها ریپوی گیتهاب برنامه رو هم ببینید\nhttps://github.com/shabane/clp\n","date":"2022-05-01T04:48:44+04:30","image":"https://bit-orbit.github.io/images/post/cclp.jpg","permalink":"https://bit-orbit.github.io/p/%DA%A9%D9%BE%DB%8C-%DA%A9%D8%B1%D8%AF%D9%86-%D8%B1%DB%8C%D8%B2%D8%A7%D9%84%D8%AA-%D9%BE%D8%A7%DB%8C%D9%BE-%D8%A8%D9%87-%DA%A9%D9%84%DB%8C%D9%BE-%D8%A8%D8%B1%D8%AF/","title":"کپی کردن ریزالت پایپ به کلیپ برد"},{"content":" شاید تا به حال از کوتاه کننده های لینک استفاده کرده باشید، اما ایا سایت کوتاه کننده لینک خودتون رو درست کردین؟\nگیتهاب پیجز یک سرور رایگان برای دیپلوی سایت های ایستا است. در واقع شما می‌توانید صفحه های html رو توی ریپو قرار بدین و این سایت اون صفحه ها رو به رایگان برای شما نمایش می‌دهد.\nاز همین قابلیت برای ساخت یک url redirector استفاده کردم، و با کمی جاوا اسکریپت یک صفحه درست کردم که وقتی شما با مرورگر اون رو باز می‌کنید، مرورگر شما به صورت خودکار به یک آدرس متفاوت منتقل خواهد شد.\nولی مشکل اینجاست که شما هر بار باید کلی html, css رو خودتان تغییر بدین و بعد قطعه کد جاوا اسکریپت رو اضافه کنید.\nCarbon من یک برنامه کوتاه کننده لینک درست کردم که زمانی که شما برنامه رو اجرا کنید، فایل های مورد نیاز رو برای شما می‌سازه.\nبرنامه رو که اجرا کنید یک CLI اجرا خواهد شد و از شما چند ورودی را درخواست خواهد کرد.\nاولین ورودی لینک طولانی است که شما نیاز دارید آن را کوتاه کنید.\nدر قدم دوم، برنامه یک نام که همان لینک کوتاه شده است را از شما خواهد گرفت، این نام را اگر به صورت خالی رها کنید، یک نام تصادفی بر اساس فایل کانفیگ در نظر گرفته خواهد شد.\nشاید سایت هایی را دیده باشید که از کاربر می‌خواند برای بازکردن لینک روی یک دکمه کلیک کنند، و در این فرصت که کاربر هنوز وارد لیک اصلی نشده است، تبلیغاتی را به آنها نمایش می‌دهند. پس سوال سوم این خواهد بود که آیا کاربر باید برای وارد شدن به لینک اصلی، دکمه‌ای را بزند و یا به صورت خودکار وارد آن شود؟\nسوال سوم از شما یک عنوان می‌خواهد که برای هدر سایت از آن استفاده کند، البته اگر تم سایت را کاستومایز کنید، این عنوان در هر جایی ممکن است قرار بگیرد.\nو آخرین سوال از شما یک توضیح برای لینک می‌خواهد. ممکن شما بخواهید قبل از اینکه کاربر وارد لینک اصلی شود یک متنی را بخواند. این توضیحات به کاربر نمایش داده خواهد شد.\nبرنامه کربن را منبع باز داخل این آدرس در گیتهاب قرار دادم، امیدوارم که مفید باشه.\nDeployment البته همینطور که می‌دانید نیاز نیست حتما از گیتهاب پیجز برای دیپلوی استفاده کنید. و تنها مشکلی که در این قضیه هست لینک هایی هست که تولید می‌شوند، این لینک ها به ساب دامین اکانت شما متصل می‌شوند، پس حفظ آن ها برای شما ساده است :) اما نکته اینجاست که کافیست شما یک دامنه ثبت کنید.\nراه دوم این است که با یک وب سرور مثل nginx این سایت را مستقر کنید، و هرگاه نیاز به ساخت لینک کوتاه داشتید، برنامه رو اجرا کنید.\nTheme من هیچ وقت دیزانر خوبی نبودم و به همین دلیل تم اصلی سایت ساده‌س. شما می‌توانید به راحتی تم خودتان رو بسازید، کافیه که داکیومنت ساخت تم رو مطالعه کنید. فقط و فقط چند تگ و فایل هست که باید ازش درون تم استفاده کنید، اگر تمی ساختید که قشنگتر از تم اصلی هست، خوشحال می‌شم به ریپو اصلی پوش کنید.\n","date":"2022-03-22T22:41:20Z","image":"https://bit-orbit.github.io/images/post/carbon_r7tm.jpg","permalink":"https://bit-orbit.github.io/p/%D8%B3%D8%A7%D8%AE%D8%AA-%DA%A9%D9%88%D8%AA%D8%A7%D9%87-%DA%A9%D9%86%D9%86%D8%AF%D9%87-%D9%84%DB%8C%D9%86%DA%A9-%D8%A8%D8%A7-%DA%AF%DB%8C%D8%AA%D9%87%D8%A7%D8%A8-%D9%BE%DB%8C%D8%AC%D8%B2/","title":"ساخت کوتاه کننده لینک با گیتهاب پیجز"},{"content":" شما باید درباره اصطلاح tty زمانی که به لینوکس و یونیکس آمد، شنیده باشید. اما tty چیست؟\nآیا برای شما به عنوان یک کاربر دستکتاپ مفید است؟\nبه آن نیاز دارید؟ می‌توانید با آن چه کار کنید؟\nاجازه دهید هر چیز ضروری برای آشنا کردن شما با اصطلاح tty را در این پست برسی کنیم.\nبه یاد داشته باشید که پاسخ قطعی برای این سوال وجود ندارد، اما به نحوه تعامل دستگاه های input/output(ورودی/خروجی) در گذشته ربط دارد.\nبرای اینکه تصویری شفاف از آن داشته باشید باید کمی از تاریخ‌ش را بدانید.\nتاریخ پشت اصطلاح tty همه چیز از یک teleprinter در سال 1830 شروع شد.\nteleprinter به شما اجازه می‌داد که از طریق سیم پیام ارسال و دریافت کنید. teleprinter جایگزینی برای ارطبات مورس کد بود در آن دو اپراتور برای ارطبات با یکدیگر مود نیاز بود. اما در teleprinter فقط به یک اپراتور برای ارسال پیام نیاز داشت. درحالی که teleprinter یک صفحه کلید مدرن نداشت، بعد ها سیستم آن توسط Donald Murray به یک صفحه کلید teletypewriter تکامل یافت.\nMurray زحمت اپراتور ها را برای ارسال و پیام را کاهش داد و این امکان را برای teletypeprinter فراهم کرد که به عنوان یک teletypewriter تجاری در سال 1908 بیرون بیاید. tty نام کوتاه شده teletypewrite است.\nتفاوت بین teletypewrite و typewriter های معمولی این بود که teletypewrite به یک دستگاه ارطباتی برای ارسال پیام نوشته شده متصل بود. teletypewriter ارطبات سریع تری را تا اکنون برای انسال بدون استفاده از کامپیوتر مقدور کرده است. و اینجا جایی است که tty بوجود آمد.\nمفهوم مدرن اکنون شما باید متعجب شده باشید که چطور tty به لینوکس و کامپیوتر مدرن آمده است.\nبسیار خب، برای شروع، زمانی که teletypewriter به بازار رسید، چند سال بعد ترانزیستور های نیمه هادی(نیمه رسانا) توسعه داده شد که به میکروپروسسور(micro proccessor) هایی تبدیل شدند که کامپیوتر را ممکن می‌کرند.\nکامپیوتر های اولیه مفهومی به اسم صفحه کلید نداشتند. کارت های پانج روش ورودی دادن به کامپیوتر ها بود\nدرحالی که کامپیوتر ها توسعه پیدا می‌کردند، بالاخره کارت های پانچ با teletypewriter به عنوان دستگاه ورودی/خروجی مناسب جایگزین شد. با توسعه تکنولوژی teletypewriter ها با استفاده از الکترونیک مجازی شدند. پس شما به یک tty فیزیکی، مکانیکی نیاز پیدا نمی‌کنید، بلکه به یک tty مجازی، الکترونیکی نیاز دارید.\nاوایل کامپیوتر ها صفحه نمایش هم نداشتند. چیز ها بجای نمایش داده شدن بروی صفحه نمایش (که وجود نداشت) به روی کاغذ چاپ می‌شدند. به همین دلیل شما بجای دیدن اصطلاح display اصطلاح print را می‌بینید. ویدیو ها به عنوان تکنولوژی پیشرفته به ترمینال(پایانه) ها اضافه شد. به عبارت دیگر شما باید درباره ترمینال های ویدیویی شنیده باشید. یا شما می‌توانید آن ها را ترمینال های فیزیکی بنامید.\nسپس اینها به ترمینال های نرم افزاری شبیه سازی شده تکامل پیدا کردند که با قابلیت ها و ویژگی های تسوسعه یافته‌ای همرا بود. این چیزی است که شما آن را terminal emulator می‌نامید.\nبرای نمونه ترمینال گنوم (Gnome) یا کنسول (Konsole) چنتا از بهترین ترمینال هایی هستند که می‌توانید برای لینوکس پیدا کنید.\nبسیارخب tty در لینوکس چیست؟ زمانی که tty به لینوکس و یونیکس آمد، یک دستگاه مستقل در یونیکس و لینوکس بود گاهی tty به یک دستگاه ورودی فیزیکی مانند serial port(درگاه سریال) اشاره می‌کرد، و گاهی به ترمینال های مجازی اشاره می‌کرد که به کاربران اجازه تعامل با سیستم را می‌داد.\ntty یک زیر سیستم در لینوکس و یونیکس است که مدریت فرایند، ویرایش خط و مدیریت نشست ها را در سطح کرنل از طریق درایور های tty ممکن می‌کند.\nاز دیدگاه برنامه نویسی شما باید در این موضوع عمیق تر شوید. اما محدوده این پست را در نظر بگیرید، این مقاله باید یک توضیح ساده برای درک بهتر باشد. در حقیقت، هر گاه یک ترمینال را باز می‌کنیم یا هر نوع shell دیگیری را در سیستمتان استفاده کنید، آن shell با tty مجازی که PTY یا pseudo-tty هم شناخته می‌شوند، تعامل خواهد داشت.\nشما می‌توانید tty را در ترمینال تایپ کنید و pty مرتبط را پیدا کنید.\nچگونه به tty در لینوکس دسترسی داشته باشیم؟ دسترسی به tty در لینوکس ساده است. در حقیت زمانی که هیچ سرنخی از اینکه tty چیست نداشتم، به طور اتفاقی به آن دسترسی پیدا کردم و از اینکه چطوری باید از آن خارج شوم وحشت زده شدم!\nشما می‌توانید با کلید های میانبر زیر در اکثر توزیع های لینوکس به صفحه tty دسترسی پیدا کنید.\nCTRL + ALT + F1 – Lockscreen\nCTRL + ALT + F2 – Desktop Environment\nCTRL + ALT + F3 – TTY3\nCTRL + ALT + F4 – TTY4\nCTRL + ALT + F5 – TT5\nCTRL + ALT + F6 – TTY6\nشما می‌توانید حد اکثر به 6 tty دسترسی داشته باشید، با این حال دو تا از اولین کلید های میانبر به صفحه قفل و محیط دسکتاپ اشاره دارد.\nبنابر این، با باقی کلید های میانبر شما به محیط command-line دسترسی می‌گیرید.\nچه زمانی شما از tty در لینوکس استفاده خواهید کرد؟ tty فقط یک گنج تکنیکی نیست. حتی برای کاربرانی مثل من که توسعه دهنده هم نیستند مفید است.\nزمانی که محیط گرافیکی فریز می‌شود باید به کار بیاید. در بعضی از مواقع نصب مجدد محیط گرافیکی با استفاده از tty می‌تواند مشکل را حل کند.\nیا شما می‌توانید tty را برای انجام کار هایی مثل آپدیت انتخاب کنید جایی که شما نمی‌خواهید مشکلات بصری فرایند های شما را مختل کند.\nبد ترین مورد سناریو، شما می‌تواند زمانی که محیط دستکتاپ جواب نمی‌دهد، برای ریبوت به tty مراجعه کنید.\nبعضی از کاربران ترجیح می‌دهند که فایل های بزرگ را با tty منتقل کنند(من از آنها نیستم)\ntty به عنوان یک دستور در لینوکس همانطور که در صفحه راهنمای (man page) tty توضیح داده شده است، زمانی که شما tty را در ترمینال تایپ کنید، نام فایل ترمینال که به وردی استاندارد متصل است را چاپ می‌کند.\nبه عبارت دیگر برای دانستن عدد tty که به آن متصل هستید، فقط tty را در ترمینال تایپ کنید. اگر چند کاربر از راه دور به سیستم لینوکس متصل هستند، می‌توانید برای برسی اینکه به چه متصل هستند از کامند who استفاده کنید.\nخارج از ترجمه متن ترجمه شده بود و خب من یک مترجم تخصصی نیستم، من یک برنامه نویسم که بلاگ نویسی و ترجمه رو هم دوست دارم، سعی کردم به بهترین نحو متن را ترجمه کنم و در اختیار بقیه بذارم، اگر حس کردین جایی از متن مشکلی داره، خیلی خوشحال می‌شوم که مشکلم رو بهم بیگید، این کمک بزرگیه.\nمتن اصلی رو می‌توانید از این لینک بخوانید.\n","date":"2022-01-31T19:57:05+03:30","image":"https://bit-orbit.github.io/images/post/tty.jpg","permalink":"https://bit-orbit.github.io/p/%D8%AF%D8%B1-%D9%84%DB%8C%D9%86%D9%88%DA%A9%D8%B3-%DA%86%DB%8C%D8%B3%D8%AA-tty/","title":" در لینوکس چیست؟ TTY "},{"content":" زمانی که مقاله یا پستی را می‌خوانم، گاهی احساس می‌کنم ممکنه یک مطلب را فراموش کنم. مثلا اگه مقاله‌ای از ویرگول درباره یک دستور لینوکس بخوانم، برای اینکه مطلبش را فراموش نکنم باید هرزگاهی به پست سر بزنم و مطالب را مرور کنم. اما فکر کنید مطلب درباره برنامه‌ای باشد که می‌توان با استفاده از آن سانسور را دور زد، ویرگول احتمالا آن مطلب را حذف می‌کند.\nچه راهی برای ذخیره پست پشنهاد می‌کنید که بعدا بتوان آن را بارها مرور کرد؟\nاگر پست از سایت منبع حذف شود، و یا حتی خود سایت دیگر در دسترس نباشد، باز هم پستی که ذخیره کرده‌اید در دسترس است؟\nدر این پست با استفاده از ابزار wget یک پست را با تمامی وابستگی هایش مانند عکس ها، فایل های js، فایل های css دانلود می‌کنیم و روی سیستم خودمان ذخیره می‌کنیم تا حتی اگر سایت در دسترس نباشد و یا پست از منبع حذف شد، پست به صورت افلاین در دسترس بماند.\nwget می‌دونید که wget یک ابزار پیشرفته برای دانلود فایله، قابلیت های زیادی که داره باعث شده بعد از سالها که ابزار های پیشرفته دانلود هم نوشته شدن، همچنان wget استفاده بشه. این برنامه روی اکثر توزیع های لینوکس به صورت دیفالت نصبه پس بیایید بدون تلف کردن وقت سوییچ های مهم برای میرور کردن یک صفحه سایت رو برسی کنیم.\nⅠ. --adjust-extension, -E\nشاید شما هم سایتی هایی را دیده باشید که url صفحه هایشان با پسوند .asp به پایان می‌رسند. برای مثال نگاهی به این آدرس بیاندازید https://www.w3schools.com/python/default.asp همانطور که می‌بینید با asp به پایان می‌رسد. زمانی که شما این صفحه را دانلود کنید، این صفحه بجای پسوند html. با پسوند asp. ذخیره خواهد شد.\nبه همین دلیل ما از این سوییچ استفاده می‌کنیم تا صفحه ها را با پسوند html. ذخیره کنیم.\n1 2 3 $ https://example.com/some/where # where.html Ⅱ. --span-hosts, -H\nاگر حتی فقط یک صفحه را میرور می‌کنیم، آن صفحه ممکن است به فایل های خارج از سایت که به روی یک CDN قرار گرفته اند نیاز داشته باشد، مثل عکس ها و یا style sheet ها. از اینرو وقتی شما یک صفحه را میرور می‌کنید wget فایل های خارج از سایت را دانلود نخواهد کرد.\nپوشش دادن فایل های خارج از سایت با استفاده از این سوییچ انجام داده می‌شود. وقتی این سوییچ را روشن کنید wget همه لینک ها از جمله لینک هایی زیر دامنه را هم دانلود خواهد کرد، مگر اینکه عمق پوشش دادن را محدود کنید.\nⅢ. --convert-links, -k\nیک صفحه را که میرور کردیم با توجه به اینکه فایل های پیشیاز مثل عکس و استایل ها را هم دانلود کردیم، وقتی فایل را با مرورگر باز کنیم همچنان صفحه html ما به فایل های داخل سایت منبع لینک شده است و فایل های پیشنازش را حتی با اینکه روی سیستم داریم، باز هم از آدرس خارجی دریافت می‌کند و نمایش می‌دهد.\nبرای اینکه یک صفحه فایل های پیشنیازش را از فایل هایی که در کنار صفحه اصلی دانلود کرده است بگیرد، از این سوییچ استفاده می‌کنیم. این سوییچ تمامی لینک ها را به لینک های داخلی تبدیل می‌کند و صفحه موقع لود شدن از فایل های داخلی استفاده می‌کند.\nⅣ. --page-requisites, -p\nاین سوییچ باعث می‌شود که wget تمامی فایل های ضروری برای درست نمایش داده شدن html را دانلود کند. این فایل ها شامل عکس ها، استایل ها و یا صدا ها می‌شود.\nⅤ. --no-directories, -nd\nبه صورت پیشفرض زمانی که صفحه‌ای با این ادرس را دانلود کنیم\nhttps://example.com/some/where/page.html\nبرنامه wget این صفحه و فایل های مورد نیازش را به این صورت ذخیره خواهد کرد\nsome/where/page.html/.\nاما با استفاده از سوییچ nd- آن صفحه و فایل های مورد نیازش فقط داخل یک دایرکتوری ذخیره خواهد شد. به این صورت\npage.html/.\nبا فعال کردن این سوییچ wget صفحه و فایل های پیشنیاز را داخل دایرکتوری فعلی ذخیره خواهد کرد. و اگر نام یک فایل بیش از یکبار تکرار شود، به نام فایل پسوند اضافه خواهد شد.\nمثال کاربردی و خروجی برای مثال من یک پست توی ویرگول که آموزش الگوریتم RSA هست رو دانلود می‌کنم┌─[loading] [/tmp/virgool] [0] │ └──〉wget -nd -E -p -k -H https://vrgl.ir/c3fVa --2022-01-18 06:41:03-- https://vrgl.ir/c3fVa Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 302 Found Location: https://virgool.io/@Novo/rsa-encryption-ao1poasym4cf [following] --2022-01-18 06:41:04-- https://virgool.io/@Novo/rsa-encryption-ao1poasym4cf Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: unspecified [text/html] Saving to: ‘c3fVa.html’ c3fVa.html [ \u0026lt;=\u0026gt; ] 61.30K 200KB/s in 0.3s 2022-01-18 06:41:06 (200 KB/s) - ‘c3fVa.html’ saved [62773] Loading robots.txt; please ignore errors. --2022-01-18 06:41:06-- https://virgool.io/robots.txt Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [document] Saving to: ‘robots.txt’ robots.txt [ \u0026lt;=\u0026gt; ] 484 --.-KB/s in 0s 2022-01-18 06:41:07 (85.7 MB/s) - ‘robots.txt’ saved [484] Loading robots.txt; please ignore errors. --2022-01-18 06:41:07-- https://www.googletagmanager.com/robots.txt Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 404 Not Found 2022-01-18 06:41:08 ERROR 404: Not Found. Loading robots.txt; please ignore errors. --2022-01-18 06:41:08-- https://files.virgool.io/robots.txt Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 403 Forbidden 2022-01-18 06:41:09 ERROR 403: Forbidden. Loading robots.txt; please ignore errors. --2022-01-18 06:41:09-- https://static.cloudflareinsights.com/robots.txt Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 522 2022-01-18 06:41:26 ERROR 522: (no description). --2022-01-18 06:41:26-- https://virgool.io/images/favicon.png?v=v2.6.15 Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: 9855 (9.6K) [image/png] Saving to: ‘favicon.png?v=v2.6.15’ favicon.png?v=v2.6.15 100%[======================================================\u0026gt;] 9.62K --.-KB/s in 0.07s 2022-01-18 06:41:27 (130 KB/s) - ‘favicon.png?v=v2.6.15’ saved [9855/9855] --2022-01-18 06:41:27-- https://virgool.io/css/styles.css?v=v2.6.15 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [text/css] Saving to: ‘styles.css?v=v2.6.15.css’ styles.css?v=v2.6.15.css [ \u0026lt;=\u0026gt; ] 903.60K 592KB/s in 1.5s 2022-01-18 06:41:28 (592 KB/s) - ‘styles.css?v=v2.6.15.css’ saved [925284] Loading robots.txt; please ignore errors. --2022-01-18 06:41:28-- https://virgool.test/robots.txt Connecting to 192.168.45.250:8080... connected. Proxy tunneling failed: Bad GatewayUnable to establish SSL connection. --2022-01-18 06:41:28-- https://www.googletagmanager.com/ns.html?id=GTM-5GS688K Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: unspecified [text/html] Saving to: ‘ns.html?id=GTM-5GS688K.html’ ns.html?id=GTM-5GS688K.html [ \u0026lt;=\u0026gt; ] 266 --.-KB/s in 0s 2022-01-18 06:41:29 (29.4 MB/s) - ‘ns.html?id=GTM-5GS688K.html’ saved [266] --2022-01-18 06:41:29-- https://files.virgool.io/upload/users/31434/avatar/1C4LLE.png?x-img=v1/resize,h_120,w_120/optimize,q_100 Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: 39194 (38K) [image/png] Saving to: ‘1C4LLE.png?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ 1C4LLE.png?x-img=v1%2Fresize,h_ 100%[======================================================\u0026gt;] 38.28K 173KB/s in 0.2s 2022-01-18 06:41:30 (173 KB/s) - ‘1C4LLE.png?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ saved [39194/39194] --2022-01-18 06:41:30-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/qhokakomwyb5.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 179870 (176K) [image/png] Saving to: ‘qhokakomwyb5.png’ qhokakomwyb5.png 100%[======================================================\u0026gt;] 175.65K 567KB/s in 0.3s 2022-01-18 06:41:31 (567 KB/s) - ‘qhokakomwyb5.png’ saved [179870/179870] --2022-01-18 06:41:31-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/v1xnwpnewfys.webp Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 12770 (12K) [image/webp] Saving to: ‘v1xnwpnewfys.webp’ v1xnwpnewfys.webp 100%[======================================================\u0026gt;] 12.47K --.-KB/s in 0.07s 2022-01-18 06:41:31 (180 KB/s) - ‘v1xnwpnewfys.webp’ saved [12770/12770] --2022-01-18 06:41:31-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/d28hpu2detkl.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 92847 (91K) [image/png] Saving to: ‘d28hpu2detkl.png’ d28hpu2detkl.png 100%[======================================================\u0026gt;] 90.67K --.-KB/s in 0.09s 2022-01-18 06:41:31 (969 KB/s) - ‘d28hpu2detkl.png’ saved [92847/92847] --2022-01-18 06:41:31-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/rhyykrc8azq0.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 17539 (17K) [image/png] Saving to: ‘rhyykrc8azq0.png’ rhyykrc8azq0.png 100%[======================================================\u0026gt;] 17.13K --.-KB/s in 0.007s 2022-01-18 06:41:32 (2.47 MB/s) - ‘rhyykrc8azq0.png’ saved [17539/17539] --2022-01-18 06:41:32-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/fjtc1ydzkuse.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 108524 (106K) [image/png] Saving to: ‘fjtc1ydzkuse.png’ fjtc1ydzkuse.png 100%[======================================================\u0026gt;] 105.98K --.-KB/s in 0.1s 2022-01-18 06:41:32 (1.06 MB/s) - ‘fjtc1ydzkuse.png’ saved [108524/108524] --2022-01-18 06:41:32-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/gfqhgyp18oic.jpeg Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 132085 (129K) [image/jpeg] Saving to: ‘gfqhgyp18oic.jpeg’ gfqhgyp18oic.jpeg 100%[======================================================\u0026gt;] 128.99K --.-KB/s in 0.1s 2022-01-18 06:41:32 (1.28 MB/s) - ‘gfqhgyp18oic.jpeg’ saved [132085/132085] --2022-01-18 06:41:32-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/me0mpjtdmyom.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 113489 (111K) [image/png] Saving to: ‘me0mpjtdmyom.png’ me0mpjtdmyom.png 100%[======================================================\u0026gt;] 110.83K --.-KB/s in 0.1s 2022-01-18 06:41:33 (814 KB/s) - ‘me0mpjtdmyom.png’ saved [113489/113489] --2022-01-18 06:41:33-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/of7krju6oqzk.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 105746 (103K) [image/png] Saving to: ‘of7krju6oqzk.png’ of7krju6oqzk.png 100%[======================================================\u0026gt;] 103.27K --.-KB/s in 0.08s 2022-01-18 06:41:33 (1.25 MB/s) - ‘of7krju6oqzk.png’ saved [105746/105746] --2022-01-18 06:41:33-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/oqwhflg4gbnq.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 120994 (118K) [image/png] Saving to: ‘oqwhflg4gbnq.png’ oqwhflg4gbnq.png 100%[======================================================\u0026gt;] 118.16K --.-KB/s in 0.1s 2022-01-18 06:41:33 (1.14 MB/s) - ‘oqwhflg4gbnq.png’ saved [120994/120994] --2022-01-18 06:41:33-- https://files.virgool.io/upload/users/31434/posts/ao1poasym4cf/taqjnfnuzxcx.png Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 122678 (120K) [image/png] Saving to: ‘taqjnfnuzxcx.png’ taqjnfnuzxcx.png 100%[======================================================\u0026gt;] 119.80K --.-KB/s in 0.06s 2022-01-18 06:41:34 (2.00 MB/s) - ‘taqjnfnuzxcx.png’ saved [122678/122678] --2022-01-18 06:41:34-- https://files.virgool.io/upload/users/63/posts/qwqrubplfaau/g8vai2incgna.jpeg?x-img=v1/resize,w_300/optimize,q_100 Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 88292 (86K) [image/jpeg] Saving to: ‘g8vai2incgna.jpeg?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ g8vai2incgna.jpeg?x-img=v1%2Fre 100%[======================================================\u0026gt;] 86.22K --.-KB/s in 0.1s 2022-01-18 06:41:34 (824 KB/s) - ‘g8vai2incgna.jpeg?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ saved [88292/88292] --2022-01-18 06:41:34-- https://files.virgool.io/upload/users/63/avatar/o8jiNe.png?x-img=v1/resize,h_120,w_120/optimize,q_100 Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 32037 (31K) [image/png] Saving to: ‘o8jiNe.png?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ o8jiNe.png?x-img=v1%2Fresize,h_ 100%[======================================================\u0026gt;] 31.29K --.-KB/s in 0.06s 2022-01-18 06:41:34 (558 KB/s) - ‘o8jiNe.png?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ saved [32037/32037] --2022-01-18 06:41:34-- https://files.virgool.io/upload/users/31434/posts/e3oydlcfkr5e/figl9y1c6otq.jpeg?x-img=v1/resize,w_300/optimize,q_100 Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 30356 (30K) [image/jpeg] Saving to: ‘figl9y1c6otq.jpeg?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ figl9y1c6otq.jpeg?x-img=v1%2Fre 100%[======================================================\u0026gt;] 29.64K --.-KB/s in 0.07s 2022-01-18 06:41:35 (401 KB/s) - ‘figl9y1c6otq.jpeg?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ saved [30356/30356] --2022-01-18 06:41:35-- https://files.virgool.io/upload/users/316150/posts/r8rhw88uh1xh/cs1ugyelv3zw.png?x-img=v1/resize,w_300/optimize,q_100 Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 34459 (34K) [image/png] Saving to: ‘cs1ugyelv3zw.png?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ cs1ugyelv3zw.png?x-img=v1%2Fres 100%[======================================================\u0026gt;] 33.65K --.-KB/s in 0.08s 2022-01-18 06:41:35 (399 KB/s) - ‘cs1ugyelv3zw.png?x-img=v1%2Fresize,w_300%2Foptimize,q_100’ saved [34459/34459] --2022-01-18 06:41:35-- https://files.virgool.io/upload/users/316150/avatar/8sz7Rs.jpeg?x-img=v1/resize,h_120,w_120/optimize,q_100 Reusing existing connection to files.virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 14764 (14K) [image/jpeg] Saving to: ‘8sz7Rs.jpeg?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ 8sz7Rs.jpeg?x-img=v1%2Fresize,h 100%[======================================================\u0026gt;] 14.42K --.-KB/s in 0.007s 2022-01-18 06:41:35 (2.11 MB/s) - ‘8sz7Rs.jpeg?x-img=v1%2Fresize,h_120,w_120%2Foptimize,q_100’ saved [14764/14764] --2022-01-18 06:41:35-- https://virgool.io/js/commons.js?v=v2.6.15 Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/javascript] Saving to: ‘commons.js?v=v2.6.15’ commons.js?v=v2.6.15 [ \u0026lt;=\u0026gt; ] 997.55K 337KB/s in 3.0s 2022-01-18 06:41:39 (337 KB/s) - ‘commons.js?v=v2.6.15’ saved [1021492] --2022-01-18 06:41:39-- https://virgool.io/js/main.js?v=v2.6.15 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/javascript] Saving to: ‘main.js?v=v2.6.15’ main.js?v=v2.6.15 [ \u0026lt;=\u0026gt; ] 1.21M 580KB/s in 2.1s 2022-01-18 06:41:41 (580 KB/s) - ‘main.js?v=v2.6.15’ saved [1267632] --2022-01-18 06:41:41-- https://static.cloudflareinsights.com/beacon.min.js/v652eace1692a40cfa3763df669d7439c1639079717194 Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: 13970 (14K) [text/javascript] Saving to: ‘v652eace1692a40cfa3763df669d7439c1639079717194’ v652eace1692a40cfa3763df669d743 100%[======================================================\u0026gt;] 13.64K --.-KB/s in 0.02s 2022-01-18 06:41:42 (600 KB/s) - ‘v652eace1692a40cfa3763df669d7439c1639079717194’ saved [13970/13970] --2022-01-18 06:41:42-- https://virgool.io/fonts/vazir/Vazir-Thin.ttf Connecting to 192.168.45.250:8080... connected. Proxy request sent, awaiting response... 200 OK Length: 98924 (97K) [application/octet-stream] Saving to: ‘Vazir-Thin.ttf’ Vazir-Thin.ttf 100%[======================================================\u0026gt;] 96.61K 140KB/s in 0.7s 2022-01-18 06:41:43 (140 KB/s) - ‘Vazir-Thin.ttf’ saved [98924/98924] --2022-01-18 06:41:43-- https://virgool.io/fonts/vazir/Vazir-Thin.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Thin.eot?’ Vazir-Thin.eot? [ \u0026lt;=\u0026gt; ] 96.80K 276KB/s in 0.4s 2022-01-18 06:41:44 (276 KB/s) - ‘Vazir-Thin.eot?’ saved [99120] --2022-01-18 06:41:44-- https://virgool.io/fonts/vazir/Vazir-Thin.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 54068 (53K) [font/woff] Saving to: ‘Vazir-Thin.woff’ Vazir-Thin.woff 100%[======================================================\u0026gt;] 52.80K --.-KB/s in 0.07s 2022-01-18 06:41:45 (770 KB/s) - ‘Vazir-Thin.woff’ saved [54068/54068] --2022-01-18 06:41:45-- https://virgool.io/fonts/vazir/Vazir-Thin.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 43000 (42K) [font/woff2] Saving to: ‘Vazir-Thin.woff2’ Vazir-Thin.woff2 100%[======================================================\u0026gt;] 41.99K --.-KB/s in 0.006s 2022-01-18 06:41:46 (6.59 MB/s) - ‘Vazir-Thin.woff2’ saved [43000/43000] --2022-01-18 06:41:46-- https://virgool.io/fonts/vazir/Vazir-Light.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 105360 (103K) [application/octet-stream] Saving to: ‘Vazir-Light.ttf’ Vazir-Light.ttf 100%[======================================================\u0026gt;] 102.89K 478KB/s in 0.2s 2022-01-18 06:41:46 (478 KB/s) - ‘Vazir-Light.ttf’ saved [105360/105360] --2022-01-18 06:41:46-- https://virgool.io/fonts/vazir/Vazir-Light.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Light.eot?’ Vazir-Light.eot? [ \u0026lt;=\u0026gt; ] 103.09K 470KB/s in 0.2s 2022-01-18 06:41:47 (470 KB/s) - ‘Vazir-Light.eot?’ saved [105562] --2022-01-18 06:41:47-- https://virgool.io/fonts/vazir/Vazir-Light.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 59688 (58K) [font/woff] Saving to: ‘Vazir-Light.woff’ Vazir-Light.woff 100%[======================================================\u0026gt;] 58.29K --.-KB/s in 0.08s 2022-01-18 06:41:48 (758 KB/s) - ‘Vazir-Light.woff’ saved [59688/59688] --2022-01-18 06:41:48-- https://virgool.io/fonts/vazir/Vazir-Light.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 48168 (47K) [font/woff2] Saving to: ‘Vazir-Light.woff2’ Vazir-Light.woff2 100%[======================================================\u0026gt;] 47.04K --.-KB/s in 0.08s 2022-01-18 06:41:48 (570 KB/s) - ‘Vazir-Light.woff2’ saved [48168/48168] --2022-01-18 06:41:48-- https://virgool.io/fonts/vazir/Vazir-Regular.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 98376 (96K) [application/octet-stream] Saving to: ‘Vazir-Regular.ttf’ Vazir-Regular.ttf 100%[======================================================\u0026gt;] 96.07K 435KB/s in 0.2s 2022-01-18 06:41:49 (435 KB/s) - ‘Vazir-Regular.ttf’ saved [98376/98376] --2022-01-18 06:41:49-- https://virgool.io/fonts/vazir/Vazir-Regular.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Regular.eot?’ Vazir-Regular.eot? [ \u0026lt;=\u0026gt; ] 96.26K 285KB/s in 0.3s 2022-01-18 06:41:50 (285 KB/s) - ‘Vazir-Regular.eot?’ saved [98574] --2022-01-18 06:41:50-- https://virgool.io/fonts/vazir/Vazir-Regular.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 53744 (52K) [font/woff] Saving to: ‘Vazir-Regular.woff’ Vazir-Regular.woff 100%[======================================================\u0026gt;] 52.48K --.-KB/s in 0.05s 2022-01-18 06:41:51 (1.10 MB/s) - ‘Vazir-Regular.woff’ saved [53744/53744] --2022-01-18 06:41:51-- https://virgool.io/fonts/vazir/Vazir-Regular.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 42744 (42K) [font/woff2] Saving to: ‘Vazir-Regular.woff2’ Vazir-Regular.woff2 100%[======================================================\u0026gt;] 41.74K --.-KB/s in 0.1s 2022-01-18 06:41:51 (412 KB/s) - ‘Vazir-Regular.woff2’ saved [42744/42744] --2022-01-18 06:41:51-- https://virgool.io/fonts/vazir/Vazir-Medium.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 98892 (97K) [application/octet-stream] Saving to: ‘Vazir-Medium.ttf’ Vazir-Medium.ttf 100%[======================================================\u0026gt;] 96.57K 606KB/s in 0.2s 2022-01-18 06:41:52 (606 KB/s) - ‘Vazir-Medium.ttf’ saved [98892/98892] --2022-01-18 06:41:52-- https://virgool.io/fonts/vazir/Vazir-Medium.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Medium.eot?’ Vazir-Medium.eot? [ \u0026lt;=\u0026gt; ] 96.78K 347KB/s in 0.3s 2022-01-18 06:41:53 (347 KB/s) - ‘Vazir-Medium.eot?’ saved [99100] --2022-01-18 06:41:53-- https://virgool.io/fonts/vazir/Vazir-Medium.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 54120 (53K) [font/woff] Saving to: ‘Vazir-Medium.woff’ Vazir-Medium.woff 100%[======================================================\u0026gt;] 52.85K 125KB/s in 0.4s 2022-01-18 06:41:54 (125 KB/s) - ‘Vazir-Medium.woff’ saved [54120/54120] --2022-01-18 06:41:54-- https://virgool.io/fonts/vazir/Vazir-Medium.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 43152 (42K) [font/woff2] Saving to: ‘Vazir-Medium.woff2’ Vazir-Medium.woff2 100%[======================================================\u0026gt;] 42.14K --.-KB/s in 0.08s 2022-01-18 06:41:54 (541 KB/s) - ‘Vazir-Medium.woff2’ saved [43152/43152] --2022-01-18 06:41:54-- https://virgool.io/fonts/vazir/Vazir-Bold.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 99840 (98K) [application/octet-stream] Saving to: ‘Vazir-Bold.ttf’ Vazir-Bold.ttf 100%[======================================================\u0026gt;] 97.50K --.-KB/s in 0.04s 2022-01-18 06:41:55 (2.61 MB/s) - ‘Vazir-Bold.ttf’ saved [99840/99840] --2022-01-18 06:41:55-- https://virgool.io/fonts/vazir/Vazir-Bold.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Bold.eot?’ Vazir-Bold.eot? [ \u0026lt;=\u0026gt; ] 97.68K 560KB/s in 0.2s 2022-01-18 06:41:56 (560 KB/s) - ‘Vazir-Bold.eot?’ saved [100026] --2022-01-18 06:41:56-- https://virgool.io/fonts/vazir/Vazir-Bold.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 54560 (53K) [font/woff] Saving to: ‘Vazir-Bold.woff’ Vazir-Bold.woff 100%[======================================================\u0026gt;] 53.28K --.-KB/s in 0.06s 2022-01-18 06:41:56 (917 KB/s) - ‘Vazir-Bold.woff’ saved [54560/54560] --2022-01-18 06:41:56-- https://virgool.io/fonts/vazir/Vazir-Bold.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 43604 (43K) [font/woff2] Saving to: ‘Vazir-Bold.woff2’ Vazir-Bold.woff2 100%[======================================================\u0026gt;] 42.58K --.-KB/s in 0.06s 2022-01-18 06:41:57 (657 KB/s) - ‘Vazir-Bold.woff2’ saved [43604/43604] --2022-01-18 06:41:57-- https://virgool.io/fonts/vazir/Vazir-Black.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 99772 (97K) [application/octet-stream] Saving to: ‘Vazir-Black.ttf’ Vazir-Black.ttf 100%[======================================================\u0026gt;] 97.43K --.-KB/s in 0.04s 2022-01-18 06:41:57 (2.18 MB/s) - ‘Vazir-Black.ttf’ saved [99772/99772] --2022-01-18 06:41:57-- https://virgool.io/fonts/vazir/Vazir-Black.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [application/vnd.ms-fontobject] Saving to: ‘Vazir-Black.eot?’ Vazir-Black.eot? [ \u0026lt;=\u0026gt; ] 97.63K 478KB/s in 0.2s 2022-01-18 06:41:58 (478 KB/s) - ‘Vazir-Black.eot?’ saved [99974] --2022-01-18 06:41:58-- https://virgool.io/fonts/vazir/Vazir-Black.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 54652 (53K) [font/woff] Saving to: ‘Vazir-Black.woff’ Vazir-Black.woff 100%[======================================================\u0026gt;] 53.37K --.-KB/s in 0.08s 2022-01-18 06:41:59 (691 KB/s) - ‘Vazir-Black.woff’ saved [54652/54652] --2022-01-18 06:41:59-- https://virgool.io/fonts/vazir/Vazir-Black.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 43332 (42K) [font/woff2] Saving to: ‘Vazir-Black.woff2’ Vazir-Black.woff2 100%[======================================================\u0026gt;] 42.32K --.-KB/s in 0.08s 2022-01-18 06:42:00 (510 KB/s) - ‘Vazir-Black.woff2’ saved [43332/43332] --2022-01-18 06:42:00-- https://virgool.io/fonts/fontawesome/fa-solid-900.ttf Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 202616 (198K) [application/octet-stream] Saving to: ‘fa-solid-900.ttf’ fa-solid-900.ttf 100%[======================================================\u0026gt;] 197.87K 501KB/s in 0.4s 2022-01-18 06:42:01 (501 KB/s) - ‘fa-solid-900.ttf’ saved [202616/202616] --2022-01-18 06:42:01-- https://virgool.io/fonts/fontawesome/fa-solid-900.eot? Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 404 Not Found 2022-01-18 06:42:01 ERROR 404: Not Found. --2022-01-18 06:42:01-- https://virgool.io/fonts/fontawesome/fa-solid-900.woff Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 103300 (101K) [font/woff] Saving to: ‘fa-solid-900.woff’ fa-solid-900.woff 100%[======================================================\u0026gt;] 100.88K 358KB/s in 0.3s 2022-01-18 06:42:02 (358 KB/s) - ‘fa-solid-900.woff’ saved [103300/103300] --2022-01-18 06:42:02-- https://virgool.io/fonts/fontawesome/fa-solid-900.woff2 Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 79444 (78K) [font/woff2] Saving to: ‘fa-solid-900.woff2’ fa-solid-900.woff2 100%[======================================================\u0026gt;] 77.58K 394KB/s in 0.2s 2022-01-18 06:42:03 (394 KB/s) - ‘fa-solid-900.woff2’ saved [79444/79444] --2022-01-18 06:42:03-- https://virgool.io/images/icons/plus.svg Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [image/svg+xml] Saving to: ‘plus.svg’ plus.svg [ \u0026lt;=\u0026gt; ] 942 --.-KB/s in 0.002s 2022-01-18 06:42:03 (383 KB/s) - ‘plus.svg’ saved [942] --2022-01-18 06:42:03-- https://virgool.io/images/icons/tick.svg Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: unspecified [image/svg+xml] Saving to: ‘tick.svg’ tick.svg [ \u0026lt;=\u0026gt; ] 942 --.-KB/s in 0s 2022-01-18 06:42:04 (89.8 MB/s) - ‘tick.svg’ saved [942] --2022-01-18 06:42:04-- https://virgool.io/images/typewriter.png Reusing existing connection to virgool.io:443. Proxy request sent, awaiting response... 200 OK Length: 172558 (169K) [image/png] Saving to: ‘typewriter.png’ typewriter.png 100%[======================================================\u0026gt;] 168.51K 349KB/s in 0.5s 2022-01-18 06:42:05 (349 KB/s) - ‘typewriter.png’ saved [172558/172558] --2022-01-18 06:42:05-- https://virgool.test/images/download-audio.png Connecting to 192.168.45.250:8080... connected. Proxy tunneling failed: Bad GatewayUnable to establish SSL connection. --2022-01-18 06:42:05-- https://virgool.test/images/download-ebook.png Connecting to 192.168.45.250:8080... connected. Proxy tunneling failed: Bad GatewayUnable to establish SSL connection. FINISHED --2022-01-18 06:42:05-- Total wall clock time: 1m 2s Downloaded: 54 files, 6.6M in 14s (479 KB/s) Converting links in ns.html?id=GTM-5GS688K.html... nothing to do. Converting links in c3fVa.html... 38. 31-7 Converting links in styles.css?v=v2.6.15.css... 35. 34-1 Converted links in 3 files in 0.06 seconds. ","date":"2022-01-17T14:56:14+03:30","image":"https://bit-orbit.github.io/images/post/snp.jpg","permalink":"https://bit-orbit.github.io/p/%D8%A7%D8%B3%D9%86%D9%BE-%D8%B4%D8%A7%D8%AA-%DA%AF%D8%B1%D9%81%D8%AA%D9%86-%D8%A7%D8%B2-%DB%8C%DA%A9-%D8%B5%D9%81%D8%AD%D9%87-%D8%B3%D8%A7%DB%8C%D8%AA-%D8%A8%D8%A7-%D8%AA%D9%85%D8%A7%D9%85%DB%8C-%D9%81%D8%A7%DB%8C%D9%84-%D9%87%D8%A7%DB%8C-%D9%88%D8%A7%D8%A8%D8%B3%D8%AA%D9%87%D8%B4%D8%B9%DA%A9%D8%B3-%D8%A7%D8%B3%D8%AA%D8%A7%DB%8C%D9%84-%D8%AC%D8%A7%D9%88%D8%A7-%D8%A7%D8%B3%DA%A9%D8%B1%DB%8C%D9%BE%D8%AA/","title":"اسنپ شات گرفتن از یک صفحه سایت با تمامی فایل های وابسته‌‌ش(عکس، استایل، جاوا اسکریپت)"},{"content":" اگر مثل من از محیط gnome روی توزیع لینوکس استفاده می‌کنید، احتمالا شیفته سادگی‌اش شدید! اما بیایید چند پلاگین به آن اضافه کنیم تا درضمن داشتن این سادگی، عملکرد این محیط را توسعه دهیم.\n#I Shutdown Timer در لینوکس به سادگی با یک کامند می‌شود سیستم را زمانبندی کرد که خاموش یا تعلیق شود. با نصب این پلاگین مجبور به وارد کردن کامند برای خاموش/تعلیق کردن نیستیم!\n#II Application Volume Mixer بار ها شده که نیاز دارم صدای یک برنامه رو کم کنم و صدای برنامه‌ای دیگر را زیاد. ممکنه بعضی از برنامه ها مانند vlc این امکان را خودشان فراهم کرده باشند. اما با این پلاگین شما به راحتی می‌توانید صدای هر برنامه را به صورت مجزا کنترل کنید.\nIII dash-to-dock task bar پیشفرض گنوم بد نیست ولی ظاهر زیبایی هم نداره. اما این پلاگین task bar شما را به dock تبدیل می‌کند. ظاهر کوچک و زیباتری دارد\nبه صورت پیشفرض زمانی که یک برنامه maximize است dock پنهان می‌شود و زمانی که موس شما به سمت مکانی که dock پنهان شده است می‌رود dock ظاهر می‌شود.\n#IV Clipboard Indicator فرض کیند متنی را کپی می‌کنیم و بعد از مدتی متن و یا فایل های دیگری را کپی می‌کنیم و بعد از مدتی مجددا به متن اولیه نیاز پیدا کرده‌ایم ولی دیگر در کلیپ برد ما نیست چرا که داده های بعدی جایگزین متن اولیه در کلیپ برد شده است.\nپلاگین clipboard indicator هر متنی را که کپی کنیم را در فهرستی ذخیره می‌کند. علاوه به این یک فهرست favorite هم در این کلیپ برد وجود دارد که می‌توانید متن هایی را به آن اضافه کنید که دیگر خذف نشوند. و همچنین از فهرست اصلی جدا باشد.\nو شاید بخشی از متنی را به یاد داشته باشید که نیاز دارید ببینید در کلیپ برد هست و یا نه، برای اینکار هم یک بخش جست و جو وجود دارد.\n#V net speed بیشتر مواقع نیاز داریم تا سرعت اینترنت را هنگام استفاده از آن ببینیم. و یا زمانی که فایلی در شبکه انتقال می‌دهیم نیاز داریم تا سرعت انتقال را در هر لحظه بدانیم. پلاگین NetSpeed این قابلیت را دارد که سرعت شبکه وایرلس و شبکه سیمی را مجزا نشان دهد.\n#VI Caffeine وقتی برای مدتی به موس و کیبرد دست نزنیم صفحه نمایش خودکار خاموش می‌شود و بعد از مدتی سیستم به حالت suspend می‌رود. اولین راهی که ذهن ما می‌رسد این است که در تظیمات زمان به تعلیق درامدن سیستم را بیشتر کنیم. اما این روش زمانی که نیازش نداریم کار مفیدی نیست، چرا که ممکن است ساعات ها سیستم بدون هیچ استفاده‌ای روشن بماند. برای همین من این پلاگین را دارم، زمانی که نیاز دارم تا از سیستم دور باشم کافئین رو روشن می‌کنم و زمانی که نمی‌دونم چی پیش میاد! خاموشش می‌‌کنم.\n#VII Google Search با وجود این اکستنشن شما مجبور به اجرای مرورگر برای جست و جوی یک عبارت نیستید. کافیه عبارت جست و جو رو در منوی overview خود گنوم بنویسید و بعد یکی از پیشنهاد های گوگل را انتخاب کنید. و یا حتی خود عبارت را جست و جو کنید.\n#VIII Jiggle کرسر موس رو گم کردین؟ موس رو تکون بدین!\n#IX Custom Hot Corners یکی از پلاگین های مورد علاقه من، با این پلاگین لبه سیستم را برای یک عمل خاصی تنظیم می‌کنیم که وقتی کرسور موس به سمت آن رفت، آن عمل انجام بشود. مثلا وقتی موس به گوشه سمت بالا برخورد کرد، منوی over view باز بشود. و یا مثلا نظیم می‌کنیم که وقتی موس به گوشه پایین سمنت چپ بر خورد کرد یک کامند اجرا شود.\n","date":"2022-01-14T18:18:28+03:30","image":"https://bit-orbit.github.io/images/post/gp.jpg","permalink":"https://bit-orbit.github.io/p/%D9%BE%D9%84%D8%A7%DA%AF%DB%8C%D9%86-%D9%87%D8%A7%DB%8C-%DA%A9%D8%A7%D8%B1%D8%A8%D8%B1%D8%AF%DB%8C-%DA%AF%D9%86%D9%88%D9%85/","title":" پلاگین های کاربردی گنوم "},{"content":"نوشتن یک برنامه کار سختی نیست، بلکه نگه‌داری و آپدیت یک برنامه‌ست، پلاگین این ویژگی را می‌دهد تا به راحتی عملکرد یک برنامه را بی‌افزاییم.\nthemes #Ⅳ انتخاب بین تم های zsh واقعا کار سختیه!‌ هر تم ظاهر جدیدی به ترمینال شما می‌دهد که کار کردن در ترمینال را جذاب تر می‌کند.\nبا استفاده از این پلاگین شما بدون نیاز به تغییر دستی فایل کانفیگ zshrc.، می‌توانید تم را تغییر بدین.\nتغییر به یک تم مشخص theme theme_name\nتغییر رندم تم theme\nدیدن لیستی از تم های نصب شده lstheme\nzsh-autosuggestions #Ⅲ تنها پلاگینی که باید نصب بشه\nاین یکی از پلاگین هایی است که بدون آن زندگی ممکن نیست!\nهمانطور که شما دستوری را تایپ می‌کنید، متنی به رنگ خاکستری ظاهر می‌شود که به شما دستورات ممکن را پیشنهاد می‌دهد و یا از history دستور مشابه که قبلا اجرا کرده‌اید را جست و جو می‌کند و پیشنهاد می‌هد. و خب شما را برای تایپ کردن کامل دستور و سوییچ هایش راحت می‌کند. برای اینکه دستور ظاهر شده تایپ شود کافیست کلید right arrow key یا همان فلش سمت راست را فشار دهید.\nsudo #Ⅱ بار ها اتفاق افتاده دستوری را که نیاز به دسترسی root داشته را بدون نوشتن کلمه sudo اجرا کرده‌ام، و بعد از دیدن ارور، دستور را دوباره تایپ کردم و کلمه sudo را هم به اول دستور اضافه کردم. اما این پلاگین بار تایپ مجدد یک دستور بخاطر فراموش کردن کلمه sudo را از دوش ما بر‌ می‌دارد. کافیست بعد از نوشتن و اجرای دستور بدون sudo، دوبار کلید esc را بزنید\nweb-search #Ⅰ وقتی با لینوکس کار می‌‌کنید، تمام لحظه ها در ترمینال هستنید. فرض کنید سوالی دارید که باید آن را گوگل کنید،‌ شما مجبور می‌شوید مرورگر را باز کنید، یک تب جدید ایجاد کنید و متنتان را سرچ کنید. ولی به این فکر کنید که نیازی به باز کردن مرورگر و یا سوییچ کردن بین ویندوز ها ندارید، کافیست عبارت google را در ترمینال تایپ کنید و متن خود را جلو آن بنوسید و در آخر دکمه اینتر را بزنید! بنگ! گوگل باز می‌شود و حاصل جست و جوی شما آماده است.\nدستور\\موتور جست و جو bing google yahoo ddg or duckduckgo sp or startpage yandex github baidu ecosia goodreads qwant givero stackoverflow wolframalpha archive scholar ","date":"2022-01-11T02:44:12+03:30","image":"https://bit-orbit.github.io/images/post/terminal.jpg","permalink":"https://bit-orbit.github.io/p/zsh-%D8%A8%D9%87%D8%AA%D8%B1%DB%8C%D9%86-%D9%BE%D9%84%D8%A7%DA%AF%DB%8C%D9%86-%D9%87%D8%A7%DB%8C/","title":" zsh بهترین پلاگین های "}]