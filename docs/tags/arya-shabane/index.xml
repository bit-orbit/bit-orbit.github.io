<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Arya Shabane on bit-orbit</title><link>https://bit-orbit.github.io/tags/arya-shabane/</link><description>Recent content in Arya Shabane on bit-orbit</description><generator>Hugo -- gohugo.io</generator><language>fa</language><lastBuildDate>Thu, 01 Aug 2024 03:03:46 +0330</lastBuildDate><atom:link href="https://bit-orbit.github.io/tags/arya-shabane/index.xml" rel="self" type="application/rss+xml"/><item><title>etc/resolve.conf/</title><link>https://bit-orbit.github.io/p/etc/resolve.conf/</link><pubDate>Thu, 01 Aug 2024 03:03:46 +0330</pubDate><guid>https://bit-orbit.github.io/p/etc/resolve.conf/</guid><description>&lt;img src="https://bit-orbit.github.io/images/post/OIG4.jpeg" alt="Featured image of post etc/resolve.conf/" />&lt;span style='font-size: 25px'>
&lt;h3 id="مقدمه">مقدمه
&lt;/h3>&lt;p>همیشه موقع ویرایش فایل
&lt;em>resolve.conf&lt;/em>
برام سوال بود که گزین های دیگه‌ای که توی این فایل تنظیم شده‌اند چکاری انجام می‌دهند.
درواقع من همیشه دستور
&lt;code>namveserver&lt;/code>
را برای تغییر سرور
&lt;em>dns&lt;/em>
ویرایش می‌کردم. اما دستور هایی دیگه‌ای هم برای این فایل وجود دارد که لیست آنها در
&lt;code>man resolve.conf&lt;/code>
توضیح داده شده است.&lt;/p>
&lt;p>توی این پست من بعضی از دستورات این فایل را توضیح می‌دم.&lt;/p>
&lt;blockquote>
&lt;p>در مرحله اول یادتون باشه لینوکس هایی که
systemd
دارند، معمولا از سرویس
systemd-resolved
هم استفاده می‌کنند، این یک سرویس
DNS
لوکال است. در واقع دامنمه‌ها را
resolve
می‌کند و سپس آنها را کش می‌کند که یک دامنه را چندین بار
resolve
نکند.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>یک دامنه حد اقل از &lt;em>دو&lt;/em> بخش تشکیل می‌شود.&lt;/p>
&lt;ol>
&lt;li>TLD&lt;/li>
&lt;li>Domain&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">bin.example.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │ └─► TDL(Top Level Domain)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ │
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│ └───────► Domain
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">│
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">└─────────────► SubDomain
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="دستورات">دستورات
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>1 &lt;code>nameserver&lt;/code>&lt;/p>
&lt;p>این دستور برای تعیین
IP
یک سرور
DNS
استفاده می‌شود.(در واقع اینجا منظورم یک سرویسی است که به نامه دامنه ها پاسخ دهد که به آن NS می‌گویم.)&lt;/p>
&lt;p>شما می‌توانید تا حداقل سه
IP
لیست کنید، و
resolver
سیستم شما به ترتیب به آنها کوئری خواهد زد.
البته زمانی که اولین
NS
جواب گو نباشد، از دیگر
NS
های لیست شده استفاده خواهد شد.&lt;/p>
&lt;p>اگر به همین ترتیب هر یک از
NS
ها جوابگو نباشد، کوئری ها از اول شروع می‌شود تا به حداکثر تعداد کوئری تعیین شده برسد.&lt;/p>
&lt;p>برای مثال من می‌توانم چند
NS
مختلف را برای خودم تعیین کنم.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">nameserver 1.1.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>
&lt;p>2 &lt;code>options&lt;/code>&lt;/p>
&lt;p>برای این دستور متغیر های مختلفی را می‌توان تعیین کرد.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>2.1 &lt;code>ndots&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>حداقل هر دامنه‌ای در سطح اینترنت یک نقطه دارد، برای مثال
google.com
یک نقطه دارد.
شما می‌توانید با این متغیر تعین کنید که دامنه‌های در سطح اینترنت
باید چند نقطه داشته باشند، هر نقطه نشانه ساب دامنه‌ است.
برای مثال به صورت پیشفرض این متغیر &lt;em>1&lt;/em> تنظیم شده است.
به این معنی است که هر دامنه‌ای یک نقطه داشت، این دامنه
در سطح اینترنت است. ولی اگر شما مقدار این متغیر را
2 تنظیم کنید، دامنه‌ای مثل
&lt;code>google.com&lt;/code>
بعنوان دامنه لوکال تشخیص داده خواهد شد و
&lt;code>hostname&lt;/code>
شما به اول دامنه اضافه خواهد شد.
مثلا اگر
&lt;code>hostname&lt;/code>
شما
&lt;code>arya&lt;/code>
باشد، دامنه به این شکل کوئری زده خواهد شد
&lt;code>google.com.arya&lt;/code>&lt;/p>
&lt;p>در صورتی که شما برای جست و جوی یک دامنه از هیچ
&lt;strong>TLD&lt;/strong>
استفاده نکید، از
&lt;code>hostname&lt;/code>
و یا از مقداری که برای
&lt;code>search&lt;/code>
مشخص کرده‌اید استفاده خواهد شد.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>2.2 &lt;code>timeout&lt;/code>&lt;/p>
&lt;ul>
&lt;li>این متغیر تعیین می‌کند که
resolver
چه مقدار زمانی باید منتظر جواب از سمت
NS
باشد، و اگر آن
NS
جواب نداد، از
NS
های بعدی سوال کند.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>2.3 &lt;code>attempts&lt;/code>&lt;/p>
&lt;ul>
&lt;li>این متغیر تعین می‌کند که
resolver
در صورت جواب ندادن توسط
NS
باید در نهایت چند کوئری دیگر ارسال کند.&lt;/li>
&lt;/ul>
&lt;p>برای مثال اگر اولین
NS
پاسخ نداد، سوال از
NS
دوم و به همین ترتیب از سوم پرسیده خواهد شد،
تابه حداکثر مقدار
attempts
برسیم.(پس
attempts
مجوع سوال ها از همه
NS
ها است.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>2.4 &lt;code>rotate&lt;/code>&lt;/p>
&lt;ul>
&lt;li>به صورت پیشفرض کوئری های
DNS
همه برای اولین
NS
لیست شده ارسال می‌شود و خب این باعث می‌شود که بار زیادی روی اولین
NS
باشد، برای اینکه این بار را بین همه
‌NS
ها تقسیم کنیم، کافیست از این متغیر استفاده کنیم.
اینکار باعث می‌شود که هر کوئری ها به صورت چرخشی به ترتیب به
NS
های لیست شده ارسال شود.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>3 &lt;code>search&lt;/code>
همانطور که در مثال بالا گفتم، ما نام دامنه ها را تنظیم می‌کنیم که حداقل وقتی یک نقطه دارند،
resolver
آنها را دامنه‌ در سطح اینترنت در نظر بگیرد و به
NS
کوئری بزند. ولی اگر هیچ نقطه‌ای نداشت و یا شما
&lt;code>ndots&lt;/code>
را بیشتر یا مساوی با 2 نتظیم کرده باشید،
&lt;code>hostname&lt;/code>
سیستم شما به آخر آن دامنه اضافه خواهد شد و یک دامنه داخلی
(local)
تلقی خواهد شد.
اما اگر می‌خواهید قبل از اضافه شدن
&lt;code>hostname&lt;/code>
به آن چیز دیگری اضافه کنید، کافیست متغیر سرچ را تعریف کنید و یک یا چند مقدار برای آن تعیین کنید.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="سرویس-systemd-resolve">سرویس systemd-resolve
&lt;/h3>&lt;p>اگر به فایل
/etc/resolve.conf
نگاه کنید، می‌بینید که یک
ns
برای شما تنظیم شده است که
IP
آن داخلی است.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl"># cat /etc/resolve.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 127.0.0.53
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>همانطور که توی نکته‌ای در مقدمه این پست گفتم،
سیستم عاملی هایی که از
systemd
استفاده می‌کنند معمولا سرویس
systemd-resolve
را دارند که یک
DNS
داخلی است. این سرویس روی
IP
127.0.0.53
و
127.0.0.54
شنود می‌کند.&lt;/p>
&lt;p>این سرویس خودش یک کانفیگ در
&lt;code>etc/ststemd/resolved.conf/&lt;/code>
دارد.&lt;/p>
&lt;p>اگر داخل این فایل را نگاه کنیم، می‌بنیم که در قسمت
‌DNS
می‌توان
NS
های بالاتر را وارد کرد، اینکار باعث می‌شود که سیستم شما وقتی یک دامنه را
در حافظه کش خود نداشت، از
NS
های بالاتر که در این فایل تنظیم شده است سوال کند.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-txt" data-lang="txt">&lt;span class="line">&lt;span class="cl">[Resolve]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">DNS=1.1.1.1 8.8.8.8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>ابته تاکید کنم در صورتی از این
NS
ها استفاده می‌شود که شما
‌از 127.0.0.53 و 127.0.0.54 در کانفیگ
/etc/resolve.conf
استفاده کرده باشید.&lt;/p>
&lt;blockquote>
&lt;p>تفاوت 127.0.0.54 این است که هر کوئری را مستقیم به
NS
بالاتر ارسال خواهد کرد و از دیتای کش شده استفاده نمی‌کند.
ولی 127.0.0.53 از قابلیت کش استفاده می‌کند.&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h3 id="مثال">مثال
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">nameserver 1.1.1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 8.8.8.8
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nameserver 9.9.9.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options ndots:1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options timeout:2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options attempts:3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">options rotate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">search server1 server2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h3 id="سخنی-با-شما">سخنی با شما
&lt;/h3>&lt;p>این را بگم که
DNS
به صورت
recursive(بازگشتی)
عمل می‌کنه، این یعنی وقتی شما یک کوئری ارسال می‌کنید،
این کوئری هر بار به یک سرور بالاتر ارسال می‌شود
تا در نهایت به جواب برسه. و خب این موضوع خودش در نهایت یک جریان
خیلی جالب داره که امیدوارم یک روز اون رو هم بنویسم :)&lt;/p>
&lt;/span></description></item><item><title>فورک بمب چیست و چطور کار می‌کند؟</title><link>https://bit-orbit.github.io/p/%D9%81%D9%88%D8%B1%DA%A9-%D8%A8%D9%85%D8%A8-%DA%86%DB%8C%D8%B3%D8%AA-%D9%88-%DA%86%D8%B7%D9%88%D8%B1-%DA%A9%D8%A7%D8%B1-%D9%85%DB%8C%DA%A9%D9%86%D8%AF/</link><pubDate>Wed, 27 Dec 2023 16:39:27 +0330</pubDate><guid>https://bit-orbit.github.io/p/%D9%81%D9%88%D8%B1%DA%A9-%D8%A8%D9%85%D8%A8-%DA%86%DB%8C%D8%B3%D8%AA-%D9%88-%DA%86%D8%B7%D9%88%D8%B1-%DA%A9%D8%A7%D8%B1-%D9%85%DB%8C%DA%A9%D9%86%D8%AF/</guid><description>&lt;img src="https://bit-orbit.github.io/images/post/fork_bomb.jpg" alt="Featured image of post فورک بمب چیست و چطور کار می‌کند؟" />&lt;p>اوایل که لینوکس نصب کرده بودم کامند هایی که توی
فروم های مختلف می‌دیدم و برای من جدید بود
را دوست داشتم یاد بگیرم و بدانم
کار آنها چی هست، برای همین هر کامندی را که می‌دیدم در
اولین
فرصت داخل سیستم خودم اجرا می‌کردم. که خب کور کورانه اجرای
هر کامندی اشتباهه بود. یکی از این کامند ها که اجرا کرده
بودم، به اسم فورک بمب
(fork bomb)
شناخته می‌شود. کامند به این صورت هست&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">:&lt;span class="o">(){&lt;/span> :&lt;span class="p">|&lt;/span>:&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>اگر این کامند را اجرا کنید(امیدوارم تا الان نکرده باشید) تقریبا زیر یک دقیقه سیستم شما
هنگ می‌کند و مجبور می‌شوید سیستم را ریبوت کنید.&lt;/p>
&lt;hr>
&lt;p>توی این پست ساختار این کامند را تشریح می‌کنم و باهم
کمی
bash
یاد می‌گیریم.&lt;/p>
&lt;p>بیایید اول با مفهوم
recustion
آشنا بشیم، زمانی که یک قطعه کد خودش اجرا کند،
recusion
می‌گویم. مثلا شما یک فانکشن می‌نویسید به اسم
&lt;em>fn&lt;/em>
و توی بدنه فانکشن فقط خود همین فانکشن را صدا می‌‌کنید،
به این کار
call recursion
گفته می‌شود. فورک بمب دقیقا همین کار را می‌کند. به این
معنی که خودش را دائم اجرا می‌کند!&lt;/p>
&lt;p>به این فکر کنید که وقتی یک پراسس خودش را اجرا می‌کند
،مجدد پراسس های اجرا شده توسط اون هم دائم خودشان را اجرا
می‌کنند،
و دوباره هر پروسه‌ای که اجرا می‌شود بازم خودش را اجرا
می‌کند و این روند تا زمانی که رم و پردازنده سیستم تحمل
داشته باشد ادامه دارد.&lt;/p>
&lt;blockquote>
&lt;p>درختی که می‌بینید را اجرای فورک بمب درنظر بگیرید،
هر ستاره یک پروسه جدید است که توسط پروسه قبلی اجرا شده،
و خودش هم دو پروسه جدید باز می‌کند و هر یک از پروسه ها
هم همین روند را ادامه می‌دهند.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-rust" data-lang="rust">&lt;span class="line">&lt;span class="cl">&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w">   &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w">   &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">├──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="err">│&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="err">└──&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>من برای اینکه سیستم‌ خودم هنگ نکند فورک بمب را روی داکر
اجرا کردم و خب حتی یک ثانیه هم طول نکشید و آن کانتینر
کاملا هنگ کرد.&lt;/p>
&lt;blockquote>
&lt;p>قبل از اجرا
&lt;a class="link" href="https://bit-orbit.github.io/images/post/forkbomb_docker0.jpg" >&lt;img src="https://bit-orbit.github.io/images/post/forkbomb_docker0.jpg"
loading="lazy"
alt="forkbomb on docker"
>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>زمان اجرا
&lt;a class="link" href="https://bit-orbit.github.io/images/post/forkbomb_docker.jpg" >&lt;img src="https://bit-orbit.github.io/images/post/forkbomb_docker.jpg"
loading="lazy"
alt="forkbomb on docker"
>&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>بیایید وارد کد بشیم، این علامت ها و کاراکتر ها چی هستند؟&lt;/p>
&lt;!-- برای تعریف یک فانکشن توی
bash
ما به این صورت عمل می‌کنیم که اول اسم فانکشن بعد پرانتز
و بعد کرلی براکت(توی فارسی می‌گیم آکولاد) و داخل کرلی
براکت ما قطعه کد را می‌نویسیم. مثلا برای فانکشنی که یک
اسم را روی صفحه چاپ کنه به این صورت عمل می‌کنیم
```bash
pname(){ echo 'foo'; }
``` -->
&lt;p>اگه دقت کنید اولین کاراکتر فورک بمب، علامت
&lt;code>:&lt;/code>
است. این علامت اسم فانکشن ما است. برخلاف قانون تعریف نام
برای متغییر ها توی
bash،
می‌توانیم از کاراتر های یونیکد هم برای تعریف نام فانکشن
استفاده کنیم، مثلا یک
کاراکتر چینی یا حتی ایموجی!&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">雨&lt;span class="o">(){&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;rain&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">❤️&lt;span class="o">(){&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;love&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>خب در ادامه علامت های
&lt;code>()&lt;/code>
را می‌بینیم، توی
bash
برای تعریف فانکشن قبل از اسم فانکشن هیچ کلمه کلیدی مثل
fn, def, void
و &amp;hellip; نیاز نیست، فقط بجای آن باید
&lt;strong>بعد از اسم فانکشن&lt;/strong>
پرانتز ها را بگذارید.&lt;/p>
&lt;p>مثل خیلی از زبان های برنامه نویسی، بدنه فانکشن توی
کرلی براکت تعریف می‌شود.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">:&lt;span class="o">(){}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>پس تا اینجا ما یک فانکشن ساده با نام
&lt;code>:&lt;/code>
تعریف کردیم.&lt;/p>
&lt;p>داخل بدنه این فانکشن، اسمی که برای فانکشن قرار دادیم
همان
&lt;code>:&lt;/code>
را می‌نویسیم. با اینکار دقیقا
call recursion
را انجام دادیم، و باعث شدیم که برنامه خودش را
توی هر اجرا مجدد اجرا کند.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">:&lt;span class="o">(){&lt;/span> : &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;blockquote>
&lt;p>دقت کنید توی سینتکس
bash
حتما باید یک فاصله برای کدی که داخلی کرلی براکت می‌نویسم قرار بدیم&lt;/p>
&lt;/blockquote>
&lt;p>علامت
&lt;code>|&lt;/code>
به اسم پایپ شناخته می‌شود، وظیفه این علامت
دادن خروجی یک کامند بعنوان ورودی به یک کامند دیگر هست،
حلا
دقت کنید که ما خروجی اجرای
&lt;code>:&lt;/code>
را به خودش می‌دهیم. دقیقا به این شکل&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">:&lt;span class="o">(){&lt;/span> :&lt;span class="p">|&lt;/span>: &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>با این علامت هر پروسه دو بار پروسه جدیدی از خودش می‌سازد
اگر از این علامت استفاده نکنیم، پروسه ما به صورت خطی خودش
را اجرا خواهد کرد، اینطوری کد ما با یک حلقه
&lt;code>while&lt;/code>
تفاوتی زیادی نخواهد داشت.&lt;/p>
&lt;p>علامت
&lt;code>&amp;amp;&lt;/code>
اجرای یک کامند را به بکگراند(پس زمینه) می‌برد.
برای مثال بعد از اجرای یک دستور باید صبر کنید پروسه
آن تمام شود تا بتوانید دستور بعدی را اجرا کنید.
ولی اگر از علامت
&lt;code>&amp;amp;&lt;/code>
بعد از هر دستور استفاده کنید، دیگر نیاز نیست
صبر کنید تا روند اجرای آن برنامه تمام شود.
درواقع با علامت
&lt;code>&amp;amp;&lt;/code>
شما می‌توانید
هر برنامه را در بکگراند اجرا کنید. حالا توی فورک بمب
این علامت باعث می‌شود تا فانشکنی که اجرا کردین درحالی که کارش به اتمام
نرسیده است، فانکشن بعدی اجرا بشود.&lt;/p>
&lt;p>&lt;img src="https://bit-orbit.github.io/images/post/forkbomb_and.jpg"
loading="lazy"
alt="&amp; in bash"
>&lt;/p>
&lt;p>و بعد علامت
&lt;code>;&lt;/code>
را می‌بینیم. این علامت کامند ها را از هم جدا می‌کند.
مثلا شما می‌توانید چند کامند مختلف را توی یک خط بنویسید.
توی فورک بمب این علامت فانکشنی که تعریف کردین را از
دستور بعدی(که اجرا کننده اون فانکشن هست)جدا می‌کند.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;bar&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;baz&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>آخرین علامتی که توی فورک بمب داریم همون علامت
&lt;code>:&lt;/code>
یا همون اسمی هست که برای فانکشن قرار دادیم.
خیلی ساده توی
bash
برای اجرای یک فانکشن فقط اسم‌ش را می‌نویسیم.&lt;/p>
&lt;p>و تمام! ما یاد گرفتیم چطور فورک بمب رو بنویسیم و دیگه
نیاز نیست حفظ‌ش کنیم :)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">:&lt;span class="o">(){&lt;/span> :&lt;span class="p">|&lt;/span>:&lt;span class="p">&amp;amp;&lt;/span> &lt;span class="o">}&lt;/span>&lt;span class="p">;&lt;/span>:
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>