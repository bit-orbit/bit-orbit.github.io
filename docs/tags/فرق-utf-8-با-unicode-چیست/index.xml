<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>فرق Utf-8 با Unicode چیست on bit-orbit</title><link>https://bit-orbit.github.io/tags/%D9%81%D8%B1%D9%82-utf-8-%D8%A8%D8%A7-unicode-%DA%86%DB%8C%D8%B3%D8%AA/</link><description>Recent content in فرق Utf-8 با Unicode چیست on bit-orbit</description><generator>Hugo -- gohugo.io</generator><language>fa</language><lastBuildDate>Mon, 11 Aug 2025 00:16:06 +0330</lastBuildDate><atom:link href="https://bit-orbit.github.io/tags/%D9%81%D8%B1%D9%82-utf-8-%D8%A8%D8%A7-unicode-%DA%86%DB%8C%D8%B3%D8%AA/index.xml" rel="self" type="application/rss+xml"/><item><title>فرق utf-8 با unicode چیه؟</title><link>https://bit-orbit.github.io/p/%D9%81%D8%B1%D9%82-utf-8-%D8%A8%D8%A7-unicode-%DA%86%DB%8C%D9%87/</link><pubDate>Mon, 11 Aug 2025 00:16:06 +0330</pubDate><guid>https://bit-orbit.github.io/p/%D9%81%D8%B1%D9%82-utf-8-%D8%A8%D8%A7-unicode-%DA%86%DB%8C%D9%87/</guid><description>&lt;img src="https://bit-orbit.github.io/images/post/wtf-utf8.png" alt="Featured image of post فرق utf-8 با unicode چیه؟" />&lt;p>&lt;a class="link" href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/" target="_blank" rel="noopener"
>این پست&lt;/a>
که درباره فرق
unicode
و
utf-8
بود خیلی مفید بنظرم رسید، برای همین خلاصه‌ای ازش رو اینجا می‌نویسم.&lt;/p>
&lt;p>زمانی که
ASCII
معرفی شد کلا برای حروف انگلیسی ساخته شده بود، و البته یکسری از کاراکتر‌ها و دستورات دیگه.
مثلا برای اسپیس کد 32 و مثلا برای حرف
A
از کد 65 داخلش استفاده میشد.
ولی کد‌های قبل 32 چی؟ اون‌ها برای دستورات استفاده میشد مثلا کد 7 برای صدای
beep
هست!&lt;/p>
&lt;p>تمامی این کاراکتر‌ها کلا توی
&lt;strong>7&lt;/strong>
بیت قرار می‌گیرن و فضای بیشتری نیاز ندارن.
مثلا اگه حرف
&lt;code>z&lt;/code>
رو درنظر بگیریم، کد اسکی‌ش میشه
&lt;code>122&lt;/code>
و باینری
&lt;code>122&lt;/code>
میشه
&lt;code>1111010&lt;/code>
و همینطور که می‌بینید، با فقط هفت بیت حروف انگلیسی، اعداد، سیمبل‌ها و دستورات رو می‌تونیم داشته باشیم،
اما کامپیوتر ها با
&lt;strong>8 بیت&lt;/strong>
کار می‌کنند، پس پیاده سازی
ascii
داخل کامپیوتر یک بیت اضافه‌ای به ما میده!(آخرین بیت سمت چپ).
برای همین از کد
&lt;code>128&lt;/code>
تا
&lt;code>255&lt;/code>
برای هیچکاری
داخل تیبل
ascii
استفاده نمیشه.&lt;/p>
&lt;p>اینجاست که شرکت‌ها و برنامه نویس ها تصمیم می‌گیرن اون بیت آخر رو برای کار های خودشون استفاده کنند.
همچنین هر زبانی مثلا یونانی برای خودش یه کد پیج داشته.
مثلا توی بعضی از سیستم عامل ها از کد
&lt;code>130&lt;/code>
برای کاراکتر
&lt;code>é&lt;/code>
استفاده میشده،
و یه ورژن دیگه‌ای از همون سیستم عامل
(DOS)
از این کد برای کاراکتر
&lt;code>ג&lt;/code>
استفاده میشده.&lt;/p>
&lt;p>اینم باید بگم که همه قبول کرده بودن که تمامی کد های زیر
&lt;code>128&lt;/code>
دست نخورده بمونه خوشبختانه.
اینکه کدهای بالای
&lt;code>128&lt;/code>
نماینده چه کاراکتری باشه بستگی داره به اینکه از چه
&lt;strong>code page&lt;/strong>
استفاده می‌کردن. مثلا
&lt;code>code page 862&lt;/code>
در اسرائیل استفاده میشده و
&lt;code>737&lt;/code>
در یونان.
حالا سیستم عامل
DOS
از کلی کد پیج ساپورت می‌کرده، ولی همزمان نمیشده توی یک فایل تکست از دو زبان استفاده کنی.&lt;/p>
&lt;p>حالا عجیب‌تر اینکه این سسیتم توی زبان هایی مثل چینی بدرد نمی‌خوره، چون خب از &amp;lsquo;حرف&amp;rsquo; استفاده نمی‌کنند و کاراکترهاشون نماده و هزاران کاراکتر دارند،
پس توی 8 بیت جا نمی‌شن. خب اینا چیکار کردن؟ از چیزی به اسم
&lt;code>DBCS&lt;/code>
استفاده کردن این یعنی
&lt;em>double bytes character set&lt;/em>
درواقع برای پیاده‌سازی زبان چینی باید تعداد بایت ها رو دو برابر می‌کردن،
این خودش مشکل داره!
اینکه تایپ یک کاراکتر ساده‌ست(حرکت رو به جلو) اما اگه بخای به عقب برگردی، این یه چالشه، چون نمی‌دونی کاراکتری که تایپ کردی یک بایتی بوده یا دو بایتی(این مشکل برنامه نویس‌ها بوده)&lt;/p>
&lt;p>تا اینجا انچنان مشکلی هم نداشتیم، اما وقتی پای اینترنت به کامپیوتر‌ها باز شد، دیگه اینجا بود متن‌ها توی سیستم‌های مختلف به خوبی کار نمی‌کردند، پس و
&lt;strong>unicode&lt;/strong>
اختراع شد.&lt;/p>
&lt;p>به صورت خلاصه
&lt;em>unicode&lt;/em>
به ازای هر کاراکتری یک کد داره
(تا اینجا مثل ascii)،
که بهش میگن
&lt;em>code point&lt;/em>،&lt;/p>
&lt;p>unicode
طوری ساخته شده که حتی اگه در آینده‌هم کاراکتری و یا زبانی اختراع بشه، با
unicode
میشه یک کد منحصر بفرد بهش اختصاص داد.
مثلا برای کاراکتر
&lt;code>A&lt;/code>
از کد
&lt;code>U0041&lt;/code>
استفاده میشه،
و یا برای مثال
&lt;code>U+0048 U+0065 U+006C U+006C U+006F&lt;/code>.
میشه
&lt;strong>Hello&lt;/strong>.
این کد‌ها هگزادسیمال هستند.&lt;/p>
&lt;p>اوکی حالا سوال اینجاست که ما برای هرکاراکتری یک کد در نظر گرفتیم، اوکی خب چطوری روی هارد قراره ذخیره‌ش کنیم؟&lt;/p>
&lt;p>در حالت اول و خب خیلی ساده میشه اکثر کد ها رو داخل
&lt;code>16&lt;/code>
بیت دخیره کرد، اما دو مشکل وجود داره:&lt;/p>
&lt;ol>
&lt;li>فضای بیشتری برای ذخیره می‌گیره&lt;/li>
&lt;li>اینکه خب اینهمه تکست که از قبل نوشته شده، یکی باید همه اونها رو تبدیل کنه.
باید بتونیم یک راه
backward compatible
بنویسیم.&lt;/li>
&lt;/ol>
&lt;p>اینجاست که جادوی
&lt;code>utf-8&lt;/code>
که یک
&lt;em>encondig&lt;/em>
هست میاد وسط،
توی
&lt;em>utf-8&lt;/em>
از
&lt;code>0&lt;/code>
تا
&lt;code>127&lt;/code>
توی همون
&lt;code>8&lt;/code>
بیت ذخیره می‌شه
و چیزی که به فضای بیشتری نیاز داره چی؟
وقتی کاراکتری بیشتر از
&lt;code>127&lt;/code>
(یعنی نیاز به بیش از &lt;code>7&lt;/code> بیت)
نیاز داشته باشه،
&lt;em>UTF-8&lt;/em>
از چند بایت استفاده می‌کنه:
بایت اول یه &amp;ldquo;الگو&amp;rdquo; داره که نشون می‌ده این کاراکتر چند بایتیه، و بایت‌های بعدی با
&lt;code>10xxxxxx&lt;/code>
شروع می‌شن. اینطوری کامپیوتر می‌فهمه این یه کاراکتر چندبایتیه و چطوری باید رمزگشایی‌ش کنه.&lt;/p></description></item></channel></rss>